schema {
  query: Query
  mutation: Mutation
}

"A segment of a collection."
type AccountingAccountsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [accountingAccount!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type AccountingItemsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [accountingItem!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type AccountingTransactionsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [accountingTransaction!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type ActionEventsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [actionEvent!]
  totalCount: Int! @cost(weight: "10")
}

type AddUserToUserGroupPayload {
  userGroup: userGroup
  query: Query!
}

"A segment of a collection."
type AllLinkedOrdersCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [linkedOrders!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type AllOrderAttachmentsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [EmailAttachmentGqlDto!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type AllOrderCommoditiesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [orderCommodity!]
  totalCount: Int! @cost(weight: "10")
}

type AppComponentGqlDto {
  appComponentId: UUID!
  appModuleId: UUID!
  componentDefinition: MapOfObject
  created: DateTime!
  createdBy: String!
  lastModified: DateTime!
  lastModifiedBy: String!
  name: String!
  organizationId: Int!
  platforms: String
  appModule: appModule!
}

"A segment of a collection."
type AppComponentsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [AppComponentGqlDto!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type AppManifestsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [appManifest!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type AppModulesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [appModule!]
  totalCount: Int! @cost(weight: "10")
}

type AppPermissionGqlDto {
  appPermissionId: UUID!
  appModuleId: UUID!
  name: String!
  organizationId: Int!
  permissionDefinition: MapOfObject
  appModule: appModule!
}

"A segment of a collection."
type AppPermissionsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [AppPermissionGqlDto!]
  totalCount: Int! @cost(weight: "10")
}

type AppRouteGqlDto {
  appRouteId: UUID!
  appModuleId: UUID!
  component: String!
  created: DateTime!
  createdBy: String!
  lastModified: DateTime!
  lastModifiedBy: String!
  name: String
  organizationId: Int!
  path: String!
  platforms: [String!]
  parentAppRouteId: UUID
  routeDefinition: MapOfObject
  props: MapOfObject
  appModule: appModule!
}

"A segment of a collection."
type AppRoutesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [AppRouteGqlDto!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type ApplicationUserRolesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [applicationUserRole!]
  totalCount: Int! @cost(weight: "10")
}

type AttachmentGqlDto {
  getParentOrder: order @cost(weight: "10")
  getPresignedUri(expiresInDays: Int!, uriType: String!): String @cost(weight: "10")
  attachmentId: Int!
  attachmentGuid: UUID
  attachmentType: AttachmentType!
  created: DateTime!
  createdBy: String!
  description: String
  fileName: String!
  fileUri: String!
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  parentId: String
  parentType: AttachmentParentType!
  previewUri: String
  thumbnailUri: String
  presignedFileUri: String
  presignedPreviewUri: String
  presignedThumbnailUri: String
  isImage: Boolean
  isPdf: Boolean
  updatedUser: user!
  createdUser: user!
  customValues: MapOfObject
}

"A segment of a collection."
type AttachmentsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [AttachmentGqlDto!]
  totalCount: Int! @cost(weight: "10")
}

type AvailableCreditByCurrency {
  currencyId: Int!
  currencyCode: String!
  totalAvailableCredit: Decimal!
  creditMemoCount: Int!
}

type CalendarAvailabilityBlockGqlDto {
  calendarAvailabilityBlockId: Int!
  calendarId: Int!
  start: DateTime!
  end: DateTime!
  isAvailable: Boolean!
  description: String
  customValues: [MapOfObject!]
  created: DateTime!
  lastModified: DateTime!
  createdBy: String!
  lastModifiedBy: String!
  calendar: CalendarGqlDto
  recurrenceRule: CalendarAvailabilityRecurrenceRuleGqlDto
}

"A segment of a collection."
type CalendarAvailabilityCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [CalendarAvailabilityBlockGqlDto!]
  totalCount: Int! @cost(weight: "10")
}

type CalendarAvailabilityRecurrenceRuleGqlDto {
  calendarAvailabilityRecurrenceRuleId: Int!
  calendarAvailabilityBlockId: Int!
  frequency: CalendarRecurrenceFrequency!
  interval: Int!
  byDay: [String!]
  byMonth: [Int!]
  byMonthDay: [Int!]
  until: DateTime
  count: Int
}

type CalendarBusinessHourGqlDto {
  calendarBusinessHourId: Int!
  calendarId: Int!
  dayOfWeek: Int!
  startTime: TimeSpan!
  endTime: TimeSpan!
  label: String
  customValues: MapOfObject
}

"A segment of a collection."
type CalendarBusinessHoursCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [CalendarBusinessHourGqlDto!]
  totalCount: Int! @cost(weight: "10")
}

type CalendarEventGqlDto {
  calendarEventId: Int!
  calendarId: Int!
  summary: String!
  description: String
  location: String
  start: DateTime!
  end: DateTime!
  status: CalendarEventStatus!
  transparency: CalendarEventTransparency!
  customValues: [MapOfObject!]
  created: DateTime!
  lastModified: DateTime!
  createdBy: String!
  lastModifiedBy: String!
  calendar: CalendarGqlDto
  recurrenceRule: CalendarRecurrenceRuleGqlDto
  exceptionDates: [CalendarExceptionDateGqlDto!]
}

"A segment of a collection."
type CalendarEventsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [CalendarEventGqlDto!]
  totalCount: Int! @cost(weight: "10")
}

type CalendarExceptionDateGqlDto {
  calendarExceptionDateId: Int!
  calendarEventId: Int!
  date: DateTime!
  reason: String
}

type CalendarGqlDto {
  calendarId: Int!
  organizationId: Int!
  name: String!
  calendarType: String!
  timeZone: String!
  customValues: MapOfObject
  created: DateTime!
  lastModified: DateTime!
  createdBy: String!
  lastModifiedBy: String!
  organization: organization
  events: [CalendarEventGqlDto!]
  availabilityBlocks: [CalendarAvailabilityBlockGqlDto!]
  businessHours: [CalendarBusinessHourGqlDto!]
}

type CalendarRecurrenceRuleGqlDto {
  calendarRecurrenceRuleId: Int!
  calendarEventId: Int!
  frequency: CalendarRecurrenceFrequency!
  interval: Int!
  byDay: [String!]
  byMonth: [Int!]
  byMonthDay: [Int!]
  until: DateTime
  count: Int
}

"A segment of a collection."
type CalendarsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [CalendarGqlDto!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type CarrierEquipmentsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [carrierEquipment!]
  totalCount: Int! @cost(weight: "10")
}

type ChangePasswordUserPayload {
  user: user
  query: Query!
}

"A segment of a collection."
type ChargesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [charge!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type CitiesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [city!]
  totalCount: Int! @cost(weight: "10")
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

"A segment of a collection."
type CommoditiesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [commodity!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type CommodityStatusesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [commodityStatus!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type CommodityTrackingNumbersCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [commodityTrackingNumber!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type CommodityTypesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [commodityType!]
  totalCount: Int! @cost(weight: "10")
}

type ComponentInput {
  name: String
  type: String
  props: [MapOfObject!]
}

type Concurrency {
  enabled: Boolean!
  group: String
  waitTime: Int!
}

type Condition {
  expression: String
}

"A segment of a collection."
type ContactAddressesByDistanceCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [contactAddressDistanceLookup!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type ContactAddressesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [contactAddress!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type ContactPaymentMethodsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [contactPaymentMethod!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type ContactStatusesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [contactStatus!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type ContactsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [contact!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type ContainerDescriptionsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [containerDescription!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type ContainerTypesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [containerType!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type CountriesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [country!]
  totalCount: Int! @cost(weight: "10")
}

type CreateAccountingAccountPayload {
  accountingAccount: accountingAccount
  query: Query!
}

type CreateAccountingItemPayload {
  accountingItem: accountingItem
  query: Query!
}

type CreateAccountingTransactionPayload {
  accountingTransaction: accountingTransaction
  query: Query!
}

type CreateActionEventPayload {
  actionEvent: actionEvent
  query: Query!
}

type CreateAppManifestPayload {
  appManifest: appManifest
  query: Query!
}

type CreateAppModulePayload {
  appModule: appModule
  query: Query!
}

type CreateAttachmentPayload {
  attachmentGqlDto: AttachmentGqlDto
  query: Query!
}

type CreateCalendarAvailabilityBlockPayload {
  calendarAvailabilityBlockGqlDto: CalendarAvailabilityBlockGqlDto
  query: Query!
}

type CreateCalendarBusinessHourPayload {
  calendarBusinessHourGqlDto: CalendarBusinessHourGqlDto
  query: Query!
}

type CreateCalendarEventPayload {
  calendarEventGqlDto: CalendarEventGqlDto
  query: Query!
}

type CreateCalendarPayload {
  calendarGqlDto: CalendarGqlDto
  query: Query!
}

type CreateCarrierEquipmentPayload {
  carrierEquipment: carrierEquipment
  query: Query!
}

type CreateChargePayload {
  charge: charge
  query: Query!
}

type CreateCityPayload {
  city: city
  query: Query!
}

type CreateCommodityPayload {
  commodity: commodity
  query: Query!
}

type CreateCommodityStatusPayload {
  commodityStatus: commodityStatus
  query: Query!
}

type CreateCommodityTrackingNumberPayload {
  commodityTrackingNumber: commodityTrackingNumber
  query: Query!
}

type CreateCommodityTypePayload {
  commodityType: commodityType
  query: Query!
}

type CreateContactAddressPayload {
  contactAddress: contactAddress
  query: Query!
}

type CreateContactPayload {
  contact: contact
  query: Query!
}

type CreateContactStatusPayload {
  contactStatus: contactStatus
  query: Query!
}

type CreateContainerDescriptionPayload {
  containerDescription: containerDescription
  query: Query!
}

type CreateContainerTypePayload {
  containerType: containerType
  query: Query!
}

type CreateCountryPayload {
  country: country
  query: Query!
}

type CreateCurrencyPayload {
  currency: currency
  query: Query!
}

type CreateCustomCodePayload {
  customCode: customCode
  query: Query!
}

type CreateDiscountPayload {
  discount: discount
  query: Query!
}

type CreateDivisionPayload {
  division: division
  query: Query!
}

type CreateEquipmentTypePayload {
  equipmentType: equipmentType
  query: Query!
}

type CreateEventDefinitionPayload {
  eventDefinition: eventDefinition
  query: Query!
}

type CreateInventoryItemPayload {
  inventoryItem: inventoryItem
  query: Query!
}

type CreateJobPayload {
  job: Job
  query: Query!
}

type CreateJobStatusPayload {
  jobStatus: jobStatus
  query: Query!
}

type CreateKnowledgeAssetPayload {
  knowledgeAsset: knowledgeAsset
  query: Query!
}

type CreateLanePayload {
  lane: lane
  query: Query!
}

type CreateModeOfTransportationPayload {
  modeOfTransportation: modeOfTransportation
  query: Query!
}

type CreateOrderCommodityPayload {
  orderCommodity: orderCommodity
  query: Query!
}

type CreateOrderDocumentPayload {
  orderDocument: orderDocument
  query: Query!
}

type CreateOrderEntityPayload {
  orderEntity: orderEntity
  query: Query!
}

type CreateOrderPayload {
  order: order
  query: Query!
}

type CreateOrderStatusPayload {
  orderStatus: orderStatus
  query: Query!
}

type CreateOrganizationConfigPayload {
  organizationConfig: organizationConfig
  query: Query!
}

type CreatePackageCategoryPayload {
  packageCategory: packageCategory
  query: Query!
}

type CreatePackageTypePayload {
  packageType: packageType
  query: Query!
}

type CreatePaymentPayload {
  payment: payment
  query: Query!
}

type CreatePaymentTermPayload {
  paymentTerm: paymentTerm
  query: Query!
}

type CreatePortPayload {
  port: port
  query: Query!
}

type CreatePostalCodePayload {
  postalCode: postalCode
  query: Query!
}

type CreateRatePayload {
  rate: rate
  query: Query!
}

type CreateRouteLegPayload {
  routeLeg: routeLeg
  query: Query!
}

type CreateRoutePayload {
  route: route
  query: Query!
}

type CreateRouteRouteLegPayload {
  routeRouteLeg: routeRouteLeg
  query: Query!
}

type CreateSalesTaxPayload {
  salesTax: salesTax
  query: Query!
}

type CreateStatePayload {
  state: state
  query: Query!
}

type CreateTrackingEventPayload {
  trackingEvent: trackingEvent
  query: Query!
}

type CreateUploadUrlResponse {
  presignedUrl: String!
  fileUrl: String!
}

type CreateUserEmployeePayload {
  userEmployee: userEmployee
  query: Query!
}

type CreateUserGroupPayload {
  userGroup: userGroup
  query: Query!
}

type CreateUserGroupRolePayload {
  userGroupRole: userGroupRole
  query: Query!
}

type CreateUserPayload {
  user: user
  query: Query!
}

type CreateUserSettingPayload {
  userSetting: userSetting
  query: Query!
}

type CreateVesselPayload {
  vessel: vessel
  query: Query!
}

type CreateWarehouseLocationPayload {
  warehouseLocation: warehouseLocation
  query: Query!
}

type CreateWarehouseZonePayload {
  warehouseZone: warehouseZone
  query: Query!
}

type CreateWorkflowPayload {
  workflow: workflow
  query: Query!
}

"A segment of a collection."
type CurrenciesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [currency!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type CustomCodesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [customCode!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type CustomerReferencesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [contact!]
  totalCount: Int! @cost(weight: "10")
}

type DeleteAccountingAccountPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteAccountingItemPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteAccountingTransactionPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteActionEventPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteAppManifestPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteAppModulePayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteAttachmentPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteCalendarAvailabilityBlockPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteCalendarBusinessHourPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteCalendarEventPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteCalendarPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteCarrierEquipmentPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteChargePayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteCityPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteCommodityPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteCommodityStatusPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteCommodityTrackingNumberPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteCommodityTypePayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteContactAddressPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteContactPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteContactStatusPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteContainerDescriptionPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteContainerTypePayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteCountryPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteCurrencyPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteCustomCodePayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteDiscountPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteDivisionPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteEquipmentTypePayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteEventDefinitionPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteInventoryItemPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteJobPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteJobStatusPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteKnowledgeAssetPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteLanePayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteModeOfTransportationPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteOrderCommodityPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteOrderDocumentPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteOrderPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteOrderStatusPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteOrganizationConfigPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeletePackageCategoryPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeletePackageTypePayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeletePaymentPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeletePaymentTermPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeletePortPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeletePostalCodePayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteRatePayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteResult {
  rowsAffected: Int!
}

type DeleteRouteLegPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteRoutePayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteRouteRouteLegPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteSalesTaxPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteStatePayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteTrackingEventPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteUserEmployeePayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteUserFromUserGroupPayload {
  userGroup: userGroup
  query: Query!
}

type DeleteUserGroupPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteUserGroupRolePayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteUserPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteUserSettingPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteVesselPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteWarehouseLocationPayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteWarehouseZonePayload {
  deleteResult: DeleteResult
  query: Query!
}

type DeleteWorkflowPayload {
  deleteResult: DeleteResult
  query: Query!
}

"A segment of a collection."
type DiscountsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [discount!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type DivisionsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [division!]
  totalCount: Int! @cost(weight: "10")
}

type DocumentTemplateGqlDto {
  documentTemplateId: Int!
  bodyHtmlTemplate: String
  bodyTextTemplate: String
  created: DateTime!
  createdBy: String!
  customPaperSize: String
  description: String!
  documentTemplateType: DocumentTemplateType!
  fileNameTemplate: String
  fileType: FileType!
  gqlQuery: String
  gqlVariables: MapOfObject
  isDefault: Boolean!
  isInactive: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  margins: String
  name: String!
  organizationId: Int!
  paperSize: PaperSizes
  subjectTemplate: String
  templatingEngine: TemplatingEngines
}

"A segment of a collection."
type DocumentTemplatesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [DocumentTemplateGqlDto!]
  totalCount: Int! @cost(weight: "10")
}

type EmailAttachmentGqlDto {
  getEmailPresignedUri(expiresInDays: Int!, uriType: String!): String @cost(weight: "10")
  attachmentId: Int
  orderDocumentId: Int
  documentWorkflowId: UUID
  fileName: String
  fileUri: String
  thumbnailUri: String
  previewUri: String
}

"A segment of a collection."
type EntityFieldsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [entityField!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type EquipmentTypesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [equipmentType!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type EquipmentTypesWithDetailsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [equipmentTypesWithDetails!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type EventDefinitionsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [eventDefinition!]
  totalCount: Int! @cost(weight: "10")
}

type ExecuteWorkflowPayload {
  workflowExecutionResult: WorkflowExecutionResult
  query: Query!
}

type ExportResult {
  url: String!
}

type FromConfigValue {
  configName: String
  key: String
}

type GroupedOrderCommoditySummaryGqlDto {
  groupBy: MapOfObject
  count: Decimal
  totalWeight: Decimal
  weightUnit: WeightUnit
  totalVolume: Decimal
  totalValue: Decimal
  volumeUnit: VolumeUnit
  totalQuantity: Decimal
}

type GroupedOrderSummaryGqlDto {
  groupBy: MapOfObject
  count: Decimal
  length: Decimal
  width: Decimal
  height: Decimal
  totalDimensions: String
  dimensionsUnit: DimensionsUnit
  totalWeight: Decimal
  weightUnit: WeightUnit
  totalVolume: Decimal
  totalValue: Decimal
  volumeUnit: VolumeUnit
  totalAmount: Decimal
  totalPieces: Decimal
  totalQuantity: Decimal
  totalExpense: Decimal
  totalIncome: Decimal
  totalProfit: Decimal
  totalIncomeTax: Decimal
  totalExpenseTax: Decimal
  attachmentCount: Int
  documentCount: Int
  childCommodities: commoditySummary
  invoiceManagerCustomers: [ManagersContactDto!]!
  billManagerShippers: [ManagersContactDto!]!
}

type ImportCommoditiesPayload {
  importResult: ImportResult
  query: Query!
}

type ImportCommodityTypesPayload {
  importResult: ImportResult
  query: Query!
}

type ImportContactsPayload {
  importResult: ImportResult
  query: Query!
}

type ImportCountriesPayload {
  importResult: ImportResult
  query: Query!
}

type ImportEquipmentTypesPayload {
  importResult: ImportResult
  query: Query!
}

type ImportPostalCodesPayload {
  importResult: ImportResult
  query: Query!
}

type ImportRatesPayload {
  importResult: ImportResult
  query: Query!
}

type ImportResult {
  total: Int!
  added: Int!
  updated: Int!
  errors: [String!]!
  skipped: Int!
  failed: Int!
}

type ImportStatesPayload {
  importResult: ImportResult
  query: Query!
}

"A segment of a collection."
type IncomingLinkedOrdersCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [linkedOrders!]
  totalCount: Int! @cost(weight: "10")
}

type InstallAppManifestPayload {
  appManifest: appManifest
  query: Query!
}

"A segment of a collection."
type InventoryItemsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [inventoryItem!]
  totalCount: Int! @cost(weight: "10")
}

type Job {
  getJobOrders(filter: String): [order] @cost(weight: "10")
  jobId: UUID!
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  customerId: Int
  description: String
  divisionId: Int
  employeeId: Int
  jobNumber: String!
  jobStatusId: Int
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  isDraft: Boolean!
  orders: [order!]
  accountingTransactions: [accountingTransaction!]
  commodities: [commodity!]!
  customer: contact
  employee: contact
  jobStatus: jobStatus
  division: division
  updatedUser: user!
  createdUser: user!
}

type JobOrderGqlDto {
  jobId: UUID!
  orderId: Int!
}

"A segment of a collection."
type JobStatusesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [jobStatus!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type JobsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Job!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type KnowledgeAssetsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [knowledgeAsset!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type LanesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [lane!]
  totalCount: Int! @cost(weight: "10")
}

type LinkDto {
  href: String!
  rel: String!
  type: String!
  templated: Boolean
}

type ManagersContactDto {
  contactId: Int!
  name: String!
}

type MergeAppManifestPayload {
  appManifest: appManifest
  query: Query!
}

"A segment of a collection."
type ModeOfTransportationsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [modeOfTransportation!]
  totalCount: Int! @cost(weight: "10")
}

type Mutation {
  createWorkflow(input: CreateWorkflowInput!): CreateWorkflowPayload! @cost(weight: "10")
  updateWorkflow(input: UpdateWorkflowInput!): UpdateWorkflowPayload! @cost(weight: "10")
  deleteWorkflow(input: DeleteWorkflowInput!): DeleteWorkflowPayload! @cost(weight: "10")
  executeWorkflow(input: ExecuteWorkflowInput!): ExecuteWorkflowPayload! @cost(weight: "10")
  createWarehouseZone(input: CreateWarehouseZoneInput!): CreateWarehouseZonePayload! @cost(weight: "10")
  updateWarehouseZone(input: UpdateWarehouseZoneInput!): UpdateWarehouseZonePayload! @cost(weight: "10")
  deleteWarehouseZone(input: DeleteWarehouseZoneInput!): DeleteWarehouseZonePayload! @cost(weight: "10")
  createVessel(input: CreateVesselInput!): CreateVesselPayload! @cost(weight: "10")
  updateVessel(input: UpdateVesselInput!): UpdateVesselPayload! @cost(weight: "10")
  deleteVessel(input: DeleteVesselInput!): DeleteVesselPayload! @cost(weight: "10")
  createUser(input: CreateUserInput!): CreateUserPayload! @cost(weight: "10")
  updateUser(input: UpdateUserInput!): UpdateUserPayload! @cost(weight: "10")
  changePasswordUser(input: ChangePasswordUserInput!): ChangePasswordUserPayload! @cost(weight: "10")
  deleteUser(input: DeleteUserInput!): DeleteUserPayload! @cost(weight: "10")
  createUserSetting(input: CreateUserSettingInput!): CreateUserSettingPayload! @cost(weight: "10")
  updateUserSetting(input: UpdateUserSettingInput!): UpdateUserSettingPayload! @cost(weight: "10")
  setUserSetting(input: SetUserSettingInput!): SetUserSettingPayload! @cost(weight: "10")
  deleteUserSetting(input: DeleteUserSettingInput!): DeleteUserSettingPayload! @cost(weight: "10")
  createUserGroupRole(input: CreateUserGroupRoleInput!): CreateUserGroupRolePayload! @cost(weight: "10")
  deleteUserGroupRole(input: DeleteUserGroupRoleInput!): DeleteUserGroupRolePayload! @cost(weight: "10")
  createUserEmployee(input: CreateUserEmployeeInput!): CreateUserEmployeePayload! @cost(weight: "10")
  updateUserEmployee(input: UpdateUserEmployeeInput!): UpdateUserEmployeePayload! @cost(weight: "10")
  deleteUserEmployee(input: DeleteUserEmployeeInput!): DeleteUserEmployeePayload! @cost(weight: "10")
  createTrackingEvent(input: CreateTrackingEventInput!): CreateTrackingEventPayload! @cost(weight: "10")
  updateTrackingEvent(input: UpdateTrackingEventInput!): UpdateTrackingEventPayload! @cost(weight: "10")
  deleteTrackingEvent(input: DeleteTrackingEventInput!): DeleteTrackingEventPayload! @cost(weight: "10")
  createState(input: CreateStateInput!): CreateStatePayload! @cost(weight: "10")
  updateState(input: UpdateStateInput!): UpdateStatePayload! @cost(weight: "10")
  deleteState(input: DeleteStateInput!): DeleteStatePayload! @cost(weight: "10")
  importStates(input: ImportStatesInput!): ImportStatesPayload! @cost(weight: "10")
  createSalesTax(input: CreateSalesTaxInput!): CreateSalesTaxPayload! @cost(weight: "10")
  updateSalesTax(input: UpdateSalesTaxInput!): UpdateSalesTaxPayload! @cost(weight: "10")
  deleteSalesTax(input: DeleteSalesTaxInput!): DeleteSalesTaxPayload! @cost(weight: "10")
  createRoute(input: CreateRouteInput!): CreateRoutePayload! @cost(weight: "10")
  updateRoute(input: UpdateRouteInput!): UpdateRoutePayload! @cost(weight: "10")
  deleteRoute(input: DeleteRouteInput!): DeleteRoutePayload! @cost(weight: "10")
  createRouteRouteLeg(input: CreateRouteRouteLegInput!): CreateRouteRouteLegPayload! @cost(weight: "10")
  updateRouteRouteLeg(input: UpdateRouteRouteLegInput!): UpdateRouteRouteLegPayload! @cost(weight: "10")
  deleteRouteRouteLeg(input: DeleteRouteRouteLegInput!): DeleteRouteRouteLegPayload! @cost(weight: "10")
  createRouteLeg(input: CreateRouteLegInput!): CreateRouteLegPayload! @cost(weight: "10")
  updateRouteLeg(input: UpdateRouteLegInput!): UpdateRouteLegPayload! @cost(weight: "10")
  deleteRouteLeg(input: DeleteRouteLegInput!): DeleteRouteLegPayload! @cost(weight: "10")
  createPostalCode(input: CreatePostalCodeInput!): CreatePostalCodePayload! @cost(weight: "10")
  updatePostalCode(input: UpdatePostalCodeInput!): UpdatePostalCodePayload! @cost(weight: "10")
  deletePostalCode(input: DeletePostalCodeInput!): DeletePostalCodePayload! @cost(weight: "10")
  importPostalCodes(input: ImportPostalCodesInput!): ImportPostalCodesPayload! @cost(weight: "10")
  createPort(input: CreatePortInput!): CreatePortPayload! @cost(weight: "10")
  updatePort(input: UpdatePortInput!): UpdatePortPayload! @cost(weight: "10")
  deletePort(input: DeletePortInput!): DeletePortPayload! @cost(weight: "10")
  createPaymentTerm(input: CreatePaymentTermInput!): CreatePaymentTermPayload! @cost(weight: "10")
  updatePaymentTerm(input: UpdatePaymentTermInput!): UpdatePaymentTermPayload! @cost(weight: "10")
  deletePaymentTerm(input: DeletePaymentTermInput!): DeletePaymentTermPayload! @cost(weight: "10")
  createPayment(input: CreatePaymentInput!): CreatePaymentPayload! @cost(weight: "10")
  updatePayment(input: UpdatePaymentInput!): UpdatePaymentPayload! @cost(weight: "10")
  deletePayment(input: DeletePaymentInput!): DeletePaymentPayload! @cost(weight: "10")
  createPackageType(input: CreatePackageTypeInput!): CreatePackageTypePayload! @cost(weight: "10")
  updatePackageType(input: UpdatePackageTypeInput!): UpdatePackageTypePayload! @cost(weight: "10")
  deletePackageType(input: DeletePackageTypeInput!): DeletePackageTypePayload! @cost(weight: "10")
  createPackageCategory(input: CreatePackageCategoryInput!): CreatePackageCategoryPayload! @cost(weight: "10")
  updatePackageCategory(input: UpdatePackageCategoryInput!): UpdatePackageCategoryPayload! @cost(weight: "10")
  deletePackageCategory(input: DeletePackageCategoryInput!): DeletePackageCategoryPayload! @cost(weight: "10")
  updateOrganization(input: UpdateOrganizationInput!): UpdateOrganizationPayload! @cost(weight: "10")
  createOrganizationConfig(input: CreateOrganizationConfigInput!): CreateOrganizationConfigPayload! @cost(weight: "10")
  updateOrganizationConfig(input: UpdateOrganizationConfigInput!): UpdateOrganizationConfigPayload! @cost(weight: "10")
  deleteOrganizationConfig(input: DeleteOrganizationConfigInput!): DeleteOrganizationConfigPayload! @cost(weight: "10")
  createWarehouseLocation(input: CreateWarehouseLocationInput!): CreateWarehouseLocationPayload! @cost(weight: "10")
  updateWarehouseLocation(input: UpdateWarehouseLocationInput!): UpdateWarehouseLocationPayload! @cost(weight: "10")
  deleteWarehouseLocation(input: DeleteWarehouseLocationInput!): DeleteWarehouseLocationPayload! @cost(weight: "10")
  createOrderStatus(input: CreateOrderStatusInput!): CreateOrderStatusPayload! @cost(weight: "10")
  updateOrderStatus(input: UpdateOrderStatusInput!): UpdateOrderStatusPayload! @cost(weight: "10")
  deleteOrderStatus(input: DeleteOrderStatusInput!): DeleteOrderStatusPayload! @cost(weight: "10")
  createOrderEntity(input: CreateOrderEntityInput!): CreateOrderEntityPayload! @cost(weight: "10")
  updateOrderEntity(input: UpdateOrderEntityInput!): UpdateOrderEntityPayload! @cost(weight: "10")
  createRate(input: CreateRateInput!): CreateRatePayload! @cost(weight: "10")
  updateRate(input: UpdateRateInput!): UpdateRatePayload! @cost(weight: "10")
  deleteRate(input: DeleteRateInput!): DeleteRatePayload! @cost(weight: "10")
  importRates(input: ImportRatesInput!): ImportRatesPayload! @cost(weight: "10")
  createOrderDocument(input: CreateOrderDocumentInput!): CreateOrderDocumentPayload! @cost(weight: "10")
  updateOrderDocument(input: UpdateOrderDocumentInput!): UpdateOrderDocumentPayload! @cost(weight: "10")
  deleteOrderDocument(input: DeleteOrderDocumentInput!): DeleteOrderDocumentPayload! @cost(weight: "10")
  createOrderCommodity(input: CreateOrderCommodityInput!): CreateOrderCommodityPayload! @cost(weight: "10")
  updateOrderCommodity(input: UpdateOrderCommodityInput!): UpdateOrderCommodityPayload! @cost(weight: "10")
  deleteOrderCommodity(input: DeleteOrderCommodityInput!): DeleteOrderCommodityPayload! @cost(weight: "10")
  createModeOfTransportation(input: CreateModeOfTransportationInput!): CreateModeOfTransportationPayload!
    @cost(weight: "10")
  updateModeOfTransportation(input: UpdateModeOfTransportationInput!): UpdateModeOfTransportationPayload!
    @cost(weight: "10")
  deleteModeOfTransportation(input: DeleteModeOfTransportationInput!): DeleteModeOfTransportationPayload!
    @cost(weight: "10")
  createLane(input: CreateLaneInput!): CreateLanePayload! @cost(weight: "10")
  updateLane(input: UpdateLaneInput!): UpdateLanePayload! @cost(weight: "10")
  deleteLane(input: DeleteLaneInput!): DeleteLanePayload! @cost(weight: "10")
  createKnowledgeAsset(input: CreateKnowledgeAssetInput!): CreateKnowledgeAssetPayload! @cost(weight: "10")
  updateKnowledgeAsset(input: UpdateKnowledgeAssetInput!): UpdateKnowledgeAssetPayload! @cost(weight: "10")
  deleteKnowledgeAsset(input: DeleteKnowledgeAssetInput!): DeleteKnowledgeAssetPayload! @cost(weight: "10")
  createJob(input: CreateJobInput!): CreateJobPayload! @cost(weight: "10")
  updateJob(input: UpdateJobInput!): UpdateJobPayload! @cost(weight: "10")
  deleteJob(input: DeleteJobInput!): DeleteJobPayload! @cost(weight: "10")
  createJobStatus(input: CreateJobStatusInput!): CreateJobStatusPayload! @cost(weight: "10")
  updateJobStatus(input: UpdateJobStatusInput!): UpdateJobStatusPayload! @cost(weight: "10")
  deleteJobStatus(input: DeleteJobStatusInput!): DeleteJobStatusPayload! @cost(weight: "10")
  createInventoryItem(input: CreateInventoryItemInput!): CreateInventoryItemPayload! @cost(weight: "10")
  updateInventoryItem(input: UpdateInventoryItemInput!): UpdateInventoryItemPayload! @cost(weight: "10")
  deleteInventoryItem(input: DeleteInventoryItemInput!): DeleteInventoryItemPayload! @cost(weight: "10")
  createEventDefinition(input: CreateEventDefinitionInput!): CreateEventDefinitionPayload! @cost(weight: "10")
  updateEventDefinition(input: UpdateEventDefinitionInput!): UpdateEventDefinitionPayload! @cost(weight: "10")
  deleteEventDefinition(input: DeleteEventDefinitionInput!): DeleteEventDefinitionPayload! @cost(weight: "10")
  createEquipmentType(input: CreateEquipmentTypeInput!): CreateEquipmentTypePayload! @cost(weight: "10")
  updateEquipmentType(input: UpdateEquipmentTypeInput!): UpdateEquipmentTypePayload! @cost(weight: "10")
  deleteEquipmentType(input: DeleteEquipmentTypeInput!): DeleteEquipmentTypePayload! @cost(weight: "10")
  importEquipmentTypes(input: ImportEquipmentTypesInput!): ImportEquipmentTypesPayload! @cost(weight: "10")
  createDivision(input: CreateDivisionInput!): CreateDivisionPayload! @cost(weight: "10")
  updateDivision(input: UpdateDivisionInput!): UpdateDivisionPayload! @cost(weight: "10")
  deleteDivision(input: DeleteDivisionInput!): DeleteDivisionPayload! @cost(weight: "10")
  createUserGroup(input: CreateUserGroupInput!): CreateUserGroupPayload! @cost(weight: "10")
  updateUserGroup(input: UpdateUserGroupInput!): UpdateUserGroupPayload! @cost(weight: "10")
  addUserToUserGroup(input: AddUserToUserGroupInput!): AddUserToUserGroupPayload! @cost(weight: "10")
  deleteUserFromUserGroup(input: DeleteUserFromUserGroupInput!): DeleteUserFromUserGroupPayload! @cost(weight: "10")
  deleteUserGroup(input: DeleteUserGroupInput!): DeleteUserGroupPayload! @cost(weight: "10")
  createDiscount(input: CreateDiscountInput!): CreateDiscountPayload! @cost(weight: "10")
  updateDiscount(input: UpdateDiscountInput!): UpdateDiscountPayload! @cost(weight: "10")
  deleteDiscount(input: DeleteDiscountInput!): DeleteDiscountPayload! @cost(weight: "10")
  createCustomCode(input: CreateCustomCodeInput!): CreateCustomCodePayload! @cost(weight: "10")
  updateCustomCode(input: UpdateCustomCodeInput!): UpdateCustomCodePayload! @cost(weight: "10")
  deleteCustomCode(input: DeleteCustomCodeInput!): DeleteCustomCodePayload! @cost(weight: "10")
  createCurrency(input: CreateCurrencyInput!): CreateCurrencyPayload! @cost(weight: "10")
  updateCurrency(input: UpdateCurrencyInput!): UpdateCurrencyPayload! @cost(weight: "10")
  deleteCurrency(input: DeleteCurrencyInput!): DeleteCurrencyPayload! @cost(weight: "10")
  createContainerType(input: CreateContainerTypeInput!): CreateContainerTypePayload! @cost(weight: "10")
  updateContainerType(input: UpdateContainerTypeInput!): UpdateContainerTypePayload! @cost(weight: "10")
  deleteContainerType(input: DeleteContainerTypeInput!): DeleteContainerTypePayload! @cost(weight: "10")
  createContainerDescription(input: CreateContainerDescriptionInput!): CreateContainerDescriptionPayload!
    @cost(weight: "10")
  updateContainerDescription(input: UpdateContainerDescriptionInput!): UpdateContainerDescriptionPayload!
    @cost(weight: "10")
  deleteContainerDescription(input: DeleteContainerDescriptionInput!): DeleteContainerDescriptionPayload!
    @cost(weight: "10")
  createContact(input: CreateContactInput!): CreateContactPayload! @cost(weight: "10")
  updateContact(input: UpdateContactInput!): UpdateContactPayload! @cost(weight: "10")
  deleteContact(input: DeleteContactInput!): DeleteContactPayload! @cost(weight: "10")
  importContacts(input: ImportContactsInput!): ImportContactsPayload! @cost(weight: "10")
  createContactStatus(input: CreateContactStatusInput!): CreateContactStatusPayload! @cost(weight: "10")
  updateContactStatus(input: UpdateContactStatusInput!): UpdateContactStatusPayload! @cost(weight: "10")
  deleteContactStatus(input: DeleteContactStatusInput!): DeleteContactStatusPayload! @cost(weight: "10")
  updateContactPaymentMethod(input: UpdateContactPaymentMethodInput!): UpdateContactPaymentMethodPayload!
    @cost(weight: "10")
  createContactAddress(input: CreateContactAddressInput!): CreateContactAddressPayload! @cost(weight: "10")
  updateContactAddress(input: UpdateContactAddressInput!): UpdateContactAddressPayload! @cost(weight: "10")
  deleteContactAddress(input: DeleteContactAddressInput!): DeleteContactAddressPayload! @cost(weight: "10")
  createCountry(input: CreateCountryInput!): CreateCountryPayload! @cost(weight: "10")
  updateCountry(input: UpdateCountryInput!): UpdateCountryPayload! @cost(weight: "10")
  deleteCountry(input: DeleteCountryInput!): DeleteCountryPayload! @cost(weight: "10")
  importCountries(input: ImportCountriesInput!): ImportCountriesPayload! @cost(weight: "10")
  createCommodityType(input: CreateCommodityTypeInput!): CreateCommodityTypePayload! @cost(weight: "10")
  updateCommodityType(input: UpdateCommodityTypeInput!): UpdateCommodityTypePayload! @cost(weight: "10")
  deleteCommodityType(input: DeleteCommodityTypeInput!): DeleteCommodityTypePayload! @cost(weight: "10")
  importCommodityTypes(input: ImportCommodityTypesInput!): ImportCommodityTypesPayload! @cost(weight: "10")
  createCommodityTrackingNumber(input: CreateCommodityTrackingNumberInput!): CreateCommodityTrackingNumberPayload!
    @cost(weight: "10")
  updateCommodityTrackingNumber(input: UpdateCommodityTrackingNumberInput!): UpdateCommodityTrackingNumberPayload!
    @cost(weight: "10")
  deleteCommodityTrackingNumber(input: DeleteCommodityTrackingNumberInput!): DeleteCommodityTrackingNumberPayload!
    @cost(weight: "10")
  createCommodityStatus(input: CreateCommodityStatusInput!): CreateCommodityStatusPayload! @cost(weight: "10")
  updateCommodityStatus(input: UpdateCommodityStatusInput!): UpdateCommodityStatusPayload! @cost(weight: "10")
  deleteCommodityStatus(input: DeleteCommodityStatusInput!): DeleteCommodityStatusPayload! @cost(weight: "10")
  createCommodity(input: CreateCommodityInput!): CreateCommodityPayload! @cost(weight: "10")
  updateCommodityV1(input: UpdateCommodityV1Input!): UpdateCommodityV1Payload! @cost(weight: "10")
  updateCommodity(input: UpdateCommodityInput!): UpdateCommodityPayload! @cost(weight: "10")
  importCommodities(input: ImportCommoditiesInput!): ImportCommoditiesPayload! @cost(weight: "10")
  deleteCommodity(input: DeleteCommodityInput!): DeleteCommodityPayload! @cost(weight: "10")
  createCity(input: CreateCityInput!): CreateCityPayload! @cost(weight: "10")
  updateCity(input: UpdateCityInput!): UpdateCityPayload! @cost(weight: "10")
  deleteCity(input: DeleteCityInput!): DeleteCityPayload! @cost(weight: "10")
  createCharge(input: CreateChargeInput!): CreateChargePayload! @cost(weight: "10")
  updateCharge(input: UpdateChargeInput!): UpdateChargePayload! @cost(weight: "10")
  deleteCharge(input: DeleteChargeInput!): DeleteChargePayload! @cost(weight: "10")
  createCarrierEquipment(input: CreateCarrierEquipmentInput!): CreateCarrierEquipmentPayload! @cost(weight: "10")
  updateCarrierEquipment(input: UpdateCarrierEquipmentInput!): UpdateCarrierEquipmentPayload! @cost(weight: "10")
  deleteCarrierEquipment(input: DeleteCarrierEquipmentInput!): DeleteCarrierEquipmentPayload! @cost(weight: "10")
  createCalendarAvailabilityBlock(
    input: CreateCalendarAvailabilityBlockInput!
  ): CreateCalendarAvailabilityBlockPayload! @cost(weight: "10")
  updateCalendarAvailabilityBlock(
    input: UpdateCalendarAvailabilityBlockInput!
  ): UpdateCalendarAvailabilityBlockPayload! @cost(weight: "10")
  deleteCalendarAvailabilityBlock(
    input: DeleteCalendarAvailabilityBlockInput!
  ): DeleteCalendarAvailabilityBlockPayload! @cost(weight: "10")
  createCalendarBusinessHour(input: CreateCalendarBusinessHourInput!): CreateCalendarBusinessHourPayload!
    @cost(weight: "10")
  updateCalendarBusinessHour(input: UpdateCalendarBusinessHourInput!): UpdateCalendarBusinessHourPayload!
    @cost(weight: "10")
  deleteCalendarBusinessHour(input: DeleteCalendarBusinessHourInput!): DeleteCalendarBusinessHourPayload!
    @cost(weight: "10")
  updateCalendarBusinessHours(input: UpdateCalendarBusinessHoursInput!): UpdateCalendarBusinessHoursPayload!
    @cost(weight: "10")
  createCalendarEvent(input: CreateCalendarEventInput!): CreateCalendarEventPayload! @cost(weight: "10")
  updateCalendarEvent(input: UpdateCalendarEventInput!): UpdateCalendarEventPayload! @cost(weight: "10")
  deleteCalendarEvent(input: DeleteCalendarEventInput!): DeleteCalendarEventPayload! @cost(weight: "10")
  createCalendar(input: CreateCalendarInput!): CreateCalendarPayload! @cost(weight: "10")
  updateCalendar(input: UpdateCalendarInput!): UpdateCalendarPayload! @cost(weight: "10")
  deleteCalendar(input: DeleteCalendarInput!): DeleteCalendarPayload! @cost(weight: "10")
  createAttachment(input: CreateAttachmentInput!): CreateAttachmentPayload! @cost(weight: "10")
  updateAttachment(input: UpdateAttachmentInput!): UpdateAttachmentPayload! @cost(weight: "10")
  deleteAttachment(input: DeleteAttachmentInput!): DeleteAttachmentPayload! @cost(weight: "10")
  createAppModule(input: CreateAppModuleInput!): CreateAppModulePayload! @cost(weight: "10")
  updateAppModule(input: UpdateAppModuleInput!): UpdateAppModulePayload! @cost(weight: "10")
  deleteAppModule(input: DeleteAppModuleInput!): DeleteAppModulePayload! @cost(weight: "10")
  createAppManifest(input: CreateAppManifestInput!): CreateAppManifestPayload! @cost(weight: "10")
  updateAppManifest(input: UpdateAppManifestInput!): UpdateAppManifestPayload! @cost(weight: "10")
  installAppManifest(input: InstallAppManifestInput!): InstallAppManifestPayload! @cost(weight: "10")
  publishAppManifest(input: PublishAppManifestInput!): PublishAppManifestPayload! @cost(weight: "10")
  deleteAppManifest(input: DeleteAppManifestInput!): DeleteAppManifestPayload! @cost(weight: "10")
  mergeAppManifest(input: MergeAppManifestInput!): MergeAppManifestPayload! @cost(weight: "10")
  createActionEvent(input: CreateActionEventInput!): CreateActionEventPayload! @cost(weight: "10")
  updateActionEvent(input: UpdateActionEventInput!): UpdateActionEventPayload! @cost(weight: "10")
  deleteActionEvent(input: DeleteActionEventInput!): DeleteActionEventPayload! @cost(weight: "10")
  createOrder(input: CreateOrderInput!): CreateOrderPayload! @cost(weight: "10")
  updateOrder(input: UpdateOrderInput!): UpdateOrderPayload! @cost(weight: "10")
  deleteOrder(input: DeleteOrderInput!): DeleteOrderPayload! @cost(weight: "10")
  createAccountingTransaction(input: CreateAccountingTransactionInput!): CreateAccountingTransactionPayload!
    @cost(weight: "10")
  updateAccountingTransaction(input: UpdateAccountingTransactionInput!): UpdateAccountingTransactionPayload!
    @cost(weight: "10")
  deleteAccountingTransaction(input: DeleteAccountingTransactionInput!): DeleteAccountingTransactionPayload!
    @cost(weight: "10")
  createAccountingItem(input: CreateAccountingItemInput!): CreateAccountingItemPayload! @cost(weight: "10")
  updateAccountingItem(input: UpdateAccountingItemInput!): UpdateAccountingItemPayload! @cost(weight: "10")
  deleteAccountingItem(input: DeleteAccountingItemInput!): DeleteAccountingItemPayload! @cost(weight: "10")
  createAccountingAccount(input: CreateAccountingAccountInput!): CreateAccountingAccountPayload! @cost(weight: "10")
  updateAccountingAccount(input: UpdateAccountingAccountInput!): UpdateAccountingAccountPayload! @cost(weight: "10")
  deleteAccountingAccount(input: DeleteAccountingAccountInput!): DeleteAccountingAccountPayload! @cost(weight: "10")
}

"A segment of a collection."
type OrderCommoditiesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [orderCommodity!]
  totalCount: Int! @cost(weight: "10")
}

type OrderCommoditySummaryGqlDto {
  totalWeight: Decimal
  weightUnit: WeightUnit
  totalVolume: Decimal
  totalValue: Decimal
  volumeUnit: VolumeUnit
  totalQuantity: Decimal
}

"A segment of a collection."
type OrderDocumentsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [orderDocument!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type OrderEntitiesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [orderEntity!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type OrderStatusesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [orderStatus!]
  totalCount: Int! @cost(weight: "10")
}

type OrderSummaryGqlDto {
  length: Decimal
  width: Decimal
  height: Decimal
  totalDimensions: String
  dimensionsUnit: DimensionsUnit
  totalWeight: Decimal
  weightUnit: WeightUnit
  totalVolume: Decimal
  totalValue: Decimal
  volumeUnit: VolumeUnit
  totalAmount: Decimal
  totalPieces: Decimal
  totalQuantity: Decimal
  totalExpense: Decimal
  totalIncome: Decimal
  totalProfit: Decimal
  totalIncomeTax: Decimal
  totalExpenseTax: Decimal
  attachmentCount: Int
  documentCount: Int
  childCommodities: commoditySummary
  invoiceManagerCustomers: [ManagersContactDto!]!
  billManagerShippers: [ManagersContactDto!]!
}

"A segment of a collection."
type OrdersCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [order!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type OrdersWithoutJobsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [order!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type OrganizationConfigsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [organizationConfig!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type OrganizationsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [organization!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type OutgoingLinkedOrdersCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [linkedOrders!]
  totalCount: Int! @cost(weight: "10")
}

type OutputMap {
  name: String
  mapping: String
  additionalProperties: [MapOfObject!]
}

"A segment of a collection."
type PackageCategoriesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [packageCategory!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type PackageTypesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [packageType!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type PaymentTermsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [paymentTerm!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type PaymentsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [payment!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type PortsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [port!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type PostalCodesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [postalCode!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type PublicAppRoutesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [AppRouteGqlDto!]
  totalCount: Int! @cost(weight: "10")
}

type PublishAppManifestPayload {
  appManifest: appManifest
  query: Query!
}

type Query {
  workflow(organizationId: Int!, workflowId: UUID!): workflow @cost(weight: "10")
  workflows(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): WorkflowsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  warehouseZone(organizationId: Int!, warehouseZoneId: Int!): warehouseZone @cost(weight: "10")
  warehouseZones(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): WarehouseZonesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  vessel(organizationId: Int!, vesselId: Int!): vessel @cost(weight: "10")
  vessels(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): VesselsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  user(organizationId: Int!, id: String!): user @cost(weight: "10")
  users(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): UsersCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  userWithoutOrganization(id: String!): user @cost(weight: "10")
  usersWithoutOrganization(
    skip: Int
    take: Int
    filter: String
    search: String
    orderBy: String
  ): UsersWithoutOrganizationCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  currentUser: user @cost(weight: "10")
  permissions(organizationId: Int!): [AppPermissionGqlDto]! @cost(weight: "10")
  userContact(organizationId: Int!): contact @cost(weight: "10")
  userSetting(organizationId: Int!, userSettingId: Int!): userSetting @cost(weight: "10")
  userSettings(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): UserSettingsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  userGroupRole(organizationId: Int!, roleId: String!, userGroupId: Int!): userGroupRole @cost(weight: "10")
  userGroupRoles(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): UserGroupRolesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  userGroupUser(userEmployeeId: Int!): userEmployee @cost(weight: "10")
  userGroupUsers(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): UserGroupUsersCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  contactUser: contact @cost(weight: "10")
  trackingEvent(organizationId: Int!, trackingEventId: Int!): trackingEvent @cost(weight: "10")
  trackingEvents(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    orderBy: String
    search: String
  ): TrackingEventsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  state(organizationId: Int!, countryCode: String!, stateCode: String!): state @cost(weight: "10")
  states(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): StatesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  search(
    skip: Int
    take: Int
    organizationId: Int!
    search: String
    entityName: String
    entityType: String
  ): SearchCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  salesTax(organizationId: Int!, salesTaxId: Int!): salesTax @cost(weight: "10")
  salesTaxes(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): SalesTaxesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  route(organizationId: Int!, routeId: Int!): route @cost(weight: "10")
  routes(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
    includeDraft: Boolean! = false
  ): RoutesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  routeRouteLeg(organizationId: Int!, routeId: Int!, routeLegId: Int!): routeRouteLeg @cost(weight: "10")
  routeRouteLegs(
    skip: Int
    take: Int
    organizationId: Int!
    routeId: Int!
    filter: String
    orderBy: String
  ): RouteRouteLegsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  routeLeg(organizationId: Int!, routeLegId: Int!): routeLeg @cost(weight: "10")
  routeLegs(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
    includeDraft: Boolean! = false
  ): RouteLegsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  role(organizationId: Int!, id: String!): role @cost(weight: "10")
  roles(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): RolesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  postalCode(organizationId: Int!, id: Int!): postalCode @cost(weight: "10")
  postalCodes(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): PostalCodesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  port(organizationId: Int!, portId: String!): port @cost(weight: "10")
  ports(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): PortsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  paymentTerm(organizationId: Int!, paymentTermId: Int!): paymentTerm @cost(weight: "10")
  paymentTerms(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): PaymentTermsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  payment(organizationId: Int!, paymentId: Int!): payment @cost(weight: "10")
  payments(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): PaymentsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  packageType(organizationId: Int!, packageTypeId: Int!): packageType @cost(weight: "10")
  packageTypes(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): PackageTypesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  packageCategory(organizationId: Int!, packageCategoryCode: String!): packageCategory @cost(weight: "10")
  packageCategories(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): PackageCategoriesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  organization(organizationId: Int!): organization @cost(weight: "10")
  organizations(skip: Int, take: Int, filter: String, search: String, orderBy: String): OrganizationsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  customValueAttachment(customValueName: String!): AttachmentGqlDto @cost(weight: "10")
  organizationConfig(organizationId: Int!, organizationConfigId: Int, configName: String): organizationConfig
    @cost(weight: "10")
  organizationConfigs(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): OrganizationConfigsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  warehouseLocation(organizationId: Int!, warehouseLocationId: Int!): warehouseLocation @cost(weight: "10")
  warehouseLocations(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): WarehouseLocationsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  orderStatus(organizationId: Int!, orderStatusId: Int!): orderStatus @cost(weight: "10")
  orderStatuses(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): OrderStatusesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  orderEntity(organizationId: Int!, orderId: Int!, orderEntityId: Int!): orderEntity @cost(weight: "10")
  orderEntities(
    skip: Int
    take: Int
    organizationId: Int!
    orderId: Int!
    filter: String
    search: String
    orderBy: String
  ): OrderEntitiesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  orderEntityAttachments(
    idPropertyName: String!
    filter: String!
    search: String
    orderBy: String
  ): [AttachmentGqlDto!]! @cost(weight: "10")
  orderDocument(organizationId: Int!, orderDocumentId: Int!): orderDocument @cost(weight: "10")
  orderDocuments(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): OrderDocumentsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  linkToDocument(expiresInDays: Int!): String! @cost(weight: "10")
  rate(organizationId: Int!, rateId: Int!): rate @cost(weight: "10")
  rates(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): RatesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  exportRates(
    exportType: FileType!
    organizationId: Int!
    rateType: RateType!
    filter: String
    search: String
    orderBy: String
    include: String
  ): ExportResult! @cost(weight: "10")
  ratesByRateIds(skip: Int, take: Int, organizationId: Int!, rateIds: [Int!]): RatesByRateIdsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 1000
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  estimatedCost(lang: String = "en-US"): String! @cost(weight: "10")
  carrier: contact @cost(weight: "10")
  orderCommodity(organizationId: Int!, orderId: Int!, commodityId: Int!): orderCommodity @cost(weight: "10")
  orderCommodities(
    skip: Int
    take: Int
    organizationId: Int!
    orderId: Int!
    filter: String
    orderBy: String
  ): OrderCommoditiesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  allOrderCommodities(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): AllOrderCommoditiesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  orderCommoditySummary(
    organizationId: Int!
    groupBy: String!
    filter: String
    weightUnit: WeightUnit
    volumeUnit: VolumeUnit
  ): [GroupedOrderCommoditySummaryGqlDto!]! @cost(weight: "10")
  modeOfTransportation(organizationId: Int!, modeOfTransportationId: Int!): modeOfTransportation @cost(weight: "10")
  modeOfTransportations(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): ModeOfTransportationsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  linkedOrder(sourceOrderId: Int!, targetOrderId: Int!): linkedOrders @cost(weight: "10")
  allLinkedOrders(
    skip: Int
    take: Int
    orderId: Int
    filter: String
    search: String
    orderBy: String
  ): AllLinkedOrdersCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  outgoingLinkedOrders(
    skip: Int
    take: Int
    orderId: Int!
    filter: String
    search: String
    orderBy: String
  ): OutgoingLinkedOrdersCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  incomingLinkedOrders(
    skip: Int
    take: Int
    orderId: Int!
    filter: String
    search: String
    orderBy: String
  ): IncomingLinkedOrdersCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  lane(organizationId: Int!, id: Int!): lane @cost(weight: "10")
  lanes(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): LanesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  knowledgeAsset(organizationId: Int!, knowledgeAssetId: UUID!): knowledgeAsset @cost(weight: "10")
  knowledgeAssets(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): KnowledgeAssetsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  job(organizationId: Int!, jobId: UUID!): Job @cost(weight: "10")
  jobs(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): JobsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  jobOrders(filter: String!): [order!]! @cost(weight: "10")
  jobStatus(organizationId: Int!, jobStatusId: Int!): jobStatus @cost(weight: "10")
  jobStatuses(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): JobStatusesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  inventoryItem(organizationId: Int!, inventoryItemId: Int!): inventoryItem @cost(weight: "10")
  inventoryItems(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): InventoryItemsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  inventoryItemContact(idPropertyName: String!): contact @cost(weight: "10")
  customerReferences(skip: Int, take: Int, organizationId: Int!, searchBy: String): CustomerReferencesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  uploadUrl(organizationId: Int!, fileName: String!, contentType: String!): CreateUploadUrlResponse! @cost(weight: "10")
  eventDefinition(organizationId: Int!, eventDefinitionId: Int!): eventDefinition @cost(weight: "10")
  eventDefinitions(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    limit: Int! = 100
    orderBy: String
    offset: Int! = 0
  ): EventDefinitionsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  equipmentType(organizationId: Int!, equipmentTypeId: Int!): equipmentType @cost(weight: "10")
  equipmentTypes(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): EquipmentTypesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  equipmentTypesWithDetails(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): EquipmentTypesWithDetailsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  entityField(organizationId: Int!, entityFieldId: Int!): entityField @cost(weight: "10")
  entityFields(
    skip: Int
    take: Int
    organizationId: Int!
    entityName: String
    filter: String
    search: String
    orderBy: String
  ): EntityFieldsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  documentTemplate(organizationId: Int!, documentTemplateId: Int!): DocumentTemplateGqlDto @cost(weight: "10")
  documentTemplates(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): DocumentTemplatesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  division(organizationId: Int!, divisionId: Int!): division @cost(weight: "10")
  divisions(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): DivisionsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  userGroup(organizationId: Int!, userGroupId: Int!): userGroup @cost(weight: "10")
  userGroups(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): UserGroupsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  discount(organizationId: Int!, discountId: Int!): discount @cost(weight: "10")
  discounts(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): DiscountsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  customCode(organizationId: Int!, code: String!): customCode @cost(weight: "10")
  customCodes(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): CustomCodesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  currency(organizationId: Int!, currencyId: Int!): currency @cost(weight: "10")
  currencies(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): CurrenciesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  containerType(organizationId: Int!, containerTypeCode: String!): containerType @cost(weight: "10")
  containerTypes(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): ContainerTypesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  containerDescription(organizationId: Int!, containerDescriptionCode: String!): containerDescription
    @cost(weight: "10")
  containerDescriptions(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): ContainerDescriptionsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  contact(organizationId: Int!, contactId: Int!): contact @cost(weight: "10")
  contacts(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): ContactsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  contactAddressByType(addressType: String!): [contactAddress!]! @cost(weight: "10")
  firstContactAddressByType(addressType: String!): contactAddress @cost(weight: "10")
  customValuesAttachment: AttachmentGqlDto @cost(weight: "10")
  contactAttachments(filter: String, orderBy: String): [AttachmentGqlDto!]! @cost(weight: "10")
  availableCredit: [AvailableCreditByCurrency!]! @cost(weight: "10")
  contactStatus(organizationId: Int!, statusId: Int!): contactStatus @cost(weight: "10")
  contactStatuses(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): ContactStatusesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  contactPaymentMethod(organizationId: Int!, contactPaymentMethodId: String!): contactPaymentMethod @cost(weight: "10")
  contactPaymentMethods(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): ContactPaymentMethodsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  contactAddressesByDistance(
    skip: Int
    take: Int
    organizationId: Int!
    latitude: Float!
    longitude: Float!
    radius: Float
    filter: String
    search: String
  ): ContactAddressesByDistanceCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  contactAddress(organizationId: Int!, contactAddressId: Int!): contactAddress @cost(weight: "10")
  contactAddresses(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): ContactAddressesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  formattedAddress(
    outputFormat: String
    addressFormat: String
    lang: String = "en-US"
    multiline: Boolean = false
  ): String! @cost(weight: "10")
  country(organizationId: Int!, countryCode: String!): country @cost(weight: "10")
  countries(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): CountriesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  commodityType(organizationId: Int!, commodityTypeId: Int!): commodityType @cost(weight: "10")
  commodityTypes(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): CommodityTypesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  commodityTrackingNumber(organizationId: Int!, commodityTrackingNumberId: Int!): commodityTrackingNumber
    @cost(weight: "10")
  commodityTrackingNumbers(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): CommodityTrackingNumbersCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  commodityStatus(organizationId: Int!, statusId: Int!): commodityStatus @cost(weight: "10")
  commodityStatuses(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): CommodityStatusesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  commodity(organizationId: Int!, commodityId: Int!): commodity @cost(weight: "10")
  commodities(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): CommoditiesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  childCommodities(filter: String): [commodity!]! @cost(weight: "10")
  parentCommodity: commodity @cost(weight: "10")
  commodityRelatedOrders(filter: String!): [order!]! @cost(weight: "10")
  commodityRelatedOrder(filter: String!): order @cost(weight: "10")
  trackingNumber(idPropertyName: String!): commodityTrackingNumber @cost(weight: "10")
  commodityAttachments(filter: String!): [AttachmentGqlDto!]! @cost(weight: "10")
  city(organizationId: Int!, cityId: Int!): city @cost(weight: "10")
  cities(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): CitiesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  charge(organizationId: Int!, chargeId: Int!): charge @cost(weight: "10")
  charges(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): ChargesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  carrierEquipment(carrierId: Int!, equipmentTypeId: Int!): carrierEquipment @cost(weight: "10")
  carrierEquipments(
    skip: Int
    take: Int
    filter: String
    search: String
    orderBy: String
  ): CarrierEquipmentsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  calendar(calendarId: Int!): CalendarGqlDto @cost(weight: "10")
  calendars(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): CalendarsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  calendarEvents(
    skip: Int
    take: Int
    calendarId: Int!
    startDate: DateTime
    endDate: DateTime
    filter: String
    orderBy: String
    expandRecurring: Boolean! = false
  ): CalendarEventsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  calendarAvailability(
    skip: Int
    take: Int
    calendarId: Int!
    startDate: DateTime
    endDate: DateTime
    filter: String
    orderBy: String
  ): CalendarAvailabilityCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  calendarBusinessHours(
    skip: Int
    take: Int
    calendarId: Int!
    dayOfWeek: Int
    filter: String
    orderBy: String
  ): CalendarBusinessHoursCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  attachment(organizationId: Int!, attachmentId: Int!): AttachmentGqlDto @cost(weight: "10")
  attachments(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): AttachmentsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  emailAttachment(organizationId: Int!, attachmentId: String!): EmailAttachmentGqlDto @cost(weight: "10")
  allOrderAttachments(
    skip: Int
    take: Int
    organizationId: Int!
    orderId: Int!
    search: String
  ): AllOrderAttachmentsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  emailPresignedUri(uriType: String!, expiresInDays: Int!): String @cost(weight: "10")
  parentOrder: order @cost(weight: "10")
  presignedUri(uriType: String!, expiresInDays: Int!): String! @cost(weight: "10")
  publicAppRoutes(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    orderBy: String
  ): PublicAppRoutesCollectionSegment
    @allowAnonymous
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  appRoute(organizationId: Int!, appRouteId: UUID!): AppRouteGqlDto @cost(weight: "10")
  appRoutes(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): AppRoutesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  appPermission(organizationId: Int!, appPermissionId: UUID!): AppPermissionGqlDto @cost(weight: "10")
  appPermissions(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): AppPermissionsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  appModule(organizationId: Int!, appModuleId: UUID!): appModule @cost(weight: "10")
  appModules(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): AppModulesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  appManifest(organizationId: Int!, appManifestId: UUID!): appManifest @cost(weight: "10")
  appManifests(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): AppManifestsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  applicationUserRole(id: String!): applicationUserRole @cost(weight: "10")
  applicationUserRoles(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): ApplicationUserRolesCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  appComponent(organizationId: Int!, name: String!, applicationName: String!, platform: String!): AppComponentGqlDto
    @cost(weight: "10")
  appComponents(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    orderBy: String
  ): AppComponentsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  actionEvent(organizationId: Int!, eventId: UUID!): actionEvent @cost(weight: "10")
  actionEvents(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): ActionEventsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  order(organizationId: Int!, orderId: Int!): order @cost(weight: "10")
  orders(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    limit: Int! = 100
    orderBy: String
    offset: Int! = 0
    search: String
    includeDraft: Boolean! = false
  ): OrdersCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  ordersWithoutJobs(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    limit: Int! = 100
    orderBy: String
    offset: Int! = 0
    search: String
    includeDraftJobs: Boolean = false
  ): OrdersWithoutJobsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  orderContact(idPropertyName: String!): contact @cost(weight: "10")
  orderPort(idPropertyName: String!): port @cost(weight: "10")
  orderCustomCode(idPropertyName: String!): customCode @cost(weight: "10")
  orderVessel(idPropertyName: String!): vessel @cost(weight: "10")
  orderCountry(idPropertyName: String!): country @cost(weight: "10")
  orderModeOfTransportation(idPropertyName: String!): modeOfTransportation @cost(weight: "10")
  orderAccountingTransactions(filter: String!, orderBy: String): [accountingTransaction!]! @cost(weight: "10")
  orderRelatedOrder(filter: String!): order @cost(weight: "10")
  orderRelatedOrders(filter: String!): [order!]! @cost(weight: "10")
  orderJobsRelatedOrders(filter: String!): [order!]! @cost(weight: "10")
  orderAttachments(filter: String!): [AttachmentGqlDto!]! @cost(weight: "10")
  orderEntityByType(
    idPropertyName: String!
    customValuesKey: String
    customValuesValue: String
    filter: String
  ): orderEntity @cost(weight: "10")
  orderCharge(chargeDescription: String!): charge @cost(weight: "10")
  chargesByChargeType(chargeType: String!): [charge]! @cost(weight: "10")
  orderSummary(
    organizationId: Int!
    groupBy: String!
    filter: String
    search: String
    weightUnit: WeightUnit
    volumeUnit: VolumeUnit
    currencyCode: String
  ): [GroupedOrderSummaryGqlDto!]! @cost(weight: "10")
  singleOrderSummary(
    weightUnit: WeightUnit
    volumeUnit: VolumeUnit
    dimensionsUnit: DimensionsUnit
  ): OrderSummaryGqlDto! @cost(weight: "10")
  lastTrackingEvent(eventDefinitionName: String): trackingEvent @cost(weight: "10")
  routeForOrder(idPropertyName: String!): route @cost(weight: "10")
  relatedOrderByProperty(idPropertyName: String!): order @cost(weight: "10")
  outgoingOrderLinks: [linkedOrders!]! @cost(weight: "10")
  incomingOrderLinks: [linkedOrders!]! @cost(weight: "10")
  accountingTransaction(organizationId: Int!, accountingTransactionId: Int!): accountingTransaction @cost(weight: "10")
  accountingTransactions(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    limit: Int! = 100
    orderBy: String
    offset: Int! = 0
    search: String
    includeDraft: Boolean! = false
  ): AccountingTransactionsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  chargesTotalAmount: Decimal! @cost(weight: "10")
  amountDue: Decimal! @cost(weight: "10")
  relatedOrdersByOrderType(orderType: String!): [order]! @cost(weight: "10")
  relatedOrderByOrderType(orderType: String!): order @cost(weight: "10")
  accountingItem(organizationId: Int!, accountingItemId: Int!): accountingItem @cost(weight: "10")
  accountingItems(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): AccountingItemsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
  accountingAccount(organizationId: Int!, accountId: Int!): accountingAccount @cost(weight: "10")
  accountingAccounts(
    skip: Int
    take: Int
    organizationId: Int!
    filter: String
    search: String
    orderBy: String
  ): AccountingAccountsCollectionSegment
    @listSize(
      assumedSize: 10000
      slicingArguments: ["take"]
      slicingArgumentDefaultValue: 10
      sizedFields: ["items"]
      requireOneSlicingArgument: false
    )
    @cost(weight: "10")
}

"A segment of a collection."
type RatesByRateIdsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [rate!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type RatesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [rate!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type RolesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [role!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type RouteLegsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [routeLeg!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type RouteRouteLegsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [routeRouteLeg!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type RoutesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [route!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type SalesTaxesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [salesTax!]
  totalCount: Int! @cost(weight: "10")
}

type Schedule {
  cron: String
  displayName: String
}

"A segment of a collection."
type SearchCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [search!]
  totalCount: Int! @cost(weight: "10")
}

type SetUserSettingPayload {
  userSetting: userSetting
  query: Query!
}

"A segment of a collection."
type StatesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [state!]
  totalCount: Int! @cost(weight: "10")
}

type SwitchCase {
  description: String
  when: [Condition!]
  steps: [WorkflowTask!]
}

"A segment of a collection."
type TrackingEventsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [trackingEvent!]
  totalCount: Int! @cost(weight: "10")
}

type UpdateAccountingAccountPayload {
  accountingAccount: accountingAccount
  query: Query!
}

type UpdateAccountingItemPayload {
  accountingItem: accountingItem
  query: Query!
}

type UpdateAccountingTransactionPayload {
  accountingTransaction: accountingTransaction
  query: Query!
}

type UpdateActionEventPayload {
  actionEvent: actionEvent
  query: Query!
}

type UpdateAppManifestPayload {
  appManifest: appManifest
  query: Query!
}

type UpdateAppModulePayload {
  appModule: appModule
  query: Query!
}

type UpdateAttachmentPayload {
  attachmentGqlDto: AttachmentGqlDto
  query: Query!
}

type UpdateCalendarAvailabilityBlockPayload {
  calendarAvailabilityBlockGqlDto: CalendarAvailabilityBlockGqlDto
  query: Query!
}

type UpdateCalendarBusinessHourPayload {
  calendarBusinessHourGqlDto: CalendarBusinessHourGqlDto
  query: Query!
}

type UpdateCalendarBusinessHoursPayload {
  updateCalendarBusinessHoursResult: UpdateCalendarBusinessHoursResult
  query: Query!
}

type UpdateCalendarBusinessHoursResult {
  calendarId: Int!
  createdCount: Int!
  updatedCount: Int!
  deletedCount: Int!
  businessHourIds: [Int!]!
}

type UpdateCalendarEventPayload {
  calendarEventGqlDto: CalendarEventGqlDto
  query: Query!
}

type UpdateCalendarPayload {
  calendarGqlDto: CalendarGqlDto
  query: Query!
}

type UpdateCarrierEquipmentPayload {
  carrierEquipment: carrierEquipment
  query: Query!
}

type UpdateChargePayload {
  charge: charge
  query: Query!
}

type UpdateCityPayload {
  city: city
  query: Query!
}

type UpdateCommodityPayload {
  commodity: commodity
  query: Query!
}

type UpdateCommodityStatusPayload {
  commodityStatus: commodityStatus
  query: Query!
}

type UpdateCommodityTrackingNumberPayload {
  commodityTrackingNumber: commodityTrackingNumber
  query: Query!
}

type UpdateCommodityTypePayload {
  commodityType: commodityType
  query: Query!
}

type UpdateCommodityV1Payload {
  commodity: commodity
  query: Query!
}

type UpdateContactAddressPayload {
  contactAddress: contactAddress
  query: Query!
}

type UpdateContactPayload {
  contact: contact
  query: Query!
}

type UpdateContactPaymentMethodPayload {
  contactPaymentMethod: contactPaymentMethod
  query: Query!
}

type UpdateContactStatusPayload {
  contactStatus: contactStatus
  query: Query!
}

type UpdateContainerDescriptionPayload {
  containerDescription: containerDescription
  query: Query!
}

type UpdateContainerTypePayload {
  containerType: containerType
  query: Query!
}

type UpdateCountryPayload {
  country: country
  query: Query!
}

type UpdateCurrencyPayload {
  currency: currency
  query: Query!
}

type UpdateCustomCodePayload {
  customCode: customCode
  query: Query!
}

type UpdateDiscountPayload {
  discount: discount
  query: Query!
}

type UpdateDivisionPayload {
  division: division
  query: Query!
}

type UpdateEquipmentTypePayload {
  equipmentType: equipmentType
  query: Query!
}

type UpdateEventDefinitionPayload {
  eventDefinition: eventDefinition
  query: Query!
}

type UpdateInventoryItemPayload {
  inventoryItem: inventoryItem
  query: Query!
}

type UpdateJobPayload {
  job: Job
  query: Query!
}

type UpdateJobStatusPayload {
  jobStatus: jobStatus
  query: Query!
}

type UpdateKnowledgeAssetPayload {
  knowledgeAsset: knowledgeAsset
  query: Query!
}

type UpdateLanePayload {
  lane: lane
  query: Query!
}

type UpdateModeOfTransportationPayload {
  modeOfTransportation: modeOfTransportation
  query: Query!
}

type UpdateOrderCommodityPayload {
  orderCommodity: orderCommodity
  query: Query!
}

type UpdateOrderDocumentPayload {
  orderDocument: orderDocument
  query: Query!
}

type UpdateOrderEntityPayload {
  orderEntity: orderEntity
  query: Query!
}

type UpdateOrderPayload {
  order: order
  query: Query!
}

type UpdateOrderStatusPayload {
  orderStatus: orderStatus
  query: Query!
}

type UpdateOrganizationConfigPayload {
  organizationConfig: organizationConfig
  query: Query!
}

type UpdateOrganizationPayload {
  organization: organization
  query: Query!
}

type UpdatePackageCategoryPayload {
  packageCategory: packageCategory
  query: Query!
}

type UpdatePackageTypePayload {
  packageType: packageType
  query: Query!
}

type UpdatePaymentPayload {
  payment: payment
  query: Query!
}

type UpdatePaymentTermPayload {
  paymentTerm: paymentTerm
  query: Query!
}

type UpdatePortPayload {
  port: port
  query: Query!
}

type UpdatePostalCodePayload {
  postalCode: postalCode
  query: Query!
}

type UpdateRatePayload {
  rate: rate
  query: Query!
}

type UpdateRouteLegPayload {
  routeLeg: routeLeg
  query: Query!
}

type UpdateRoutePayload {
  route: route
  query: Query!
}

type UpdateRouteRouteLegPayload {
  routeRouteLeg: routeRouteLeg
  query: Query!
}

type UpdateSalesTaxPayload {
  salesTax: salesTax
  query: Query!
}

type UpdateStatePayload {
  state: state
  query: Query!
}

type UpdateTrackingEventPayload {
  trackingEvent: trackingEvent
  query: Query!
}

type UpdateUserEmployeePayload {
  userEmployee: userEmployee
  query: Query!
}

type UpdateUserGroupPayload {
  userGroup: userGroup
  query: Query!
}

type UpdateUserPayload {
  user: user
  query: Query!
}

type UpdateUserSettingPayload {
  userSetting: userSetting
  query: Query!
}

type UpdateVesselPayload {
  vessel: vessel
  query: Query!
}

type UpdateWarehouseLocationPayload {
  warehouseLocation: warehouseLocation
  query: Query!
}

type UpdateWarehouseZonePayload {
  warehouseZone: warehouseZone
  query: Query!
}

type UpdateWorkflowPayload {
  workflow: workflow
  query: Query!
}

"A segment of a collection."
type UserGroupRolesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [userGroupRole!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type UserGroupUsersCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [userEmployee!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type UserGroupsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [userGroup!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type UserSettingsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [userSetting!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type UsersCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [user!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type UsersWithoutOrganizationCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [user!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type VesselsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [vessel!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type WarehouseLocationsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [warehouseLocation!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type WarehouseZonesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [warehouseZone!]
  totalCount: Int! @cost(weight: "10")
}

type WorkflowActivity {
  name: String
  displayName: String
  description: String
  steps: [WorkflowTask!]
  conditions: [Condition!]
  events: [WorkflowEventHandler!]
  variables: [WorkflowVariable!]
}

type WorkflowDocument {
  workflow: WorkflowRuntime
  triggers: [WorkflowTrigger!]
  activities: [WorkflowActivity!]
  variables: [WorkflowVariable!]
  schedules: [Schedule!]
  outputs: [OutputMap!]
  inputs: [ComponentInput!]
  events: [WorkflowEventHandler!]
}

type WorkflowEventHandler {
  type: String!
  steps: [WorkflowTask!]
}

type WorkflowExecutionResult {
  outputs: MapOfObject
  executionId: UUID!
  workflowId: UUID!
  isAsync: Boolean!
  workflowType: String!
}

type WorkflowRuntime {
  additionalProperties: MapOfObject
  name: String
  description: String
  version: String
  executionMode: WorkflowRuntimeExecutionMode
  logLevel: LogLevel!
  enableActionEvents: Boolean!
  workflowId: UUID
  enableTransaction: Boolean
  workflowType: String
  isActive: Boolean!
  enableAudit: Boolean!
  runAs: String
  priority: Int
  tags: [String!]
  concurrency: Concurrency
}

type WorkflowTask {
  task: String!
  name: String
  description: String
  displayName: String
  inputs: [MapOfObject!]
  conditions: [Condition!]
  continueOnError: Boolean!
  outputs: [OutputMap!]
  collection: String
  item: String
  maxIterations: Int
  steps: [WorkflowTask!]
  cases: [SwitchCase!]
  default: [WorkflowTask!]
  runAs: String
}

type WorkflowTrigger {
  name: String
  displayName: String
  type: String
  entityName: String
  eventType: String
  position: String
  conditions: [Condition!]
}

type WorkflowVariable {
  name: String
  fromConfig: FromConfigValue
}

"A segment of a collection."
type WorkflowsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [workflow!]
  totalCount: Int! @cost(weight: "10")
}

type accountingAccount {
  accountId: Int!
  accountName: String!
  accountNumber: String
  accountType: AccountType!
  created: DateTime!
  createdBy: String!
  isInactive: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  parentAccountId: Int
  parentAccount: accountingAccount
  updatedUser: user!
  createdUser: user!
}

type accountingItem {
  accountingItemId: Int!
  accountId: Int!
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  description: String!
  isInactive: Boolean!
  itemCode: String
  itemType: ItemType!
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  price: Decimal
  salesTaxId: Int
  salesTax: salesTax
  tariff: Any
  updatedUser: user!
  createdUser: user!
  account: accountingAccount
}

type accountingSummary {
  totalIncome: Decimal!
  totalExpense: Decimal!
  profit: Decimal!
}

type accountingTransaction {
  getChargesTotalAmount: Decimal @cost(weight: "10")
  getAmountDue: Decimal @cost(weight: "10")
  getRelatedOrdersByOrderType(orderType: String!): [order] @cost(weight: "10")
  getRelatedOrderByOrderType(orderType: String!): order @cost(weight: "10")
  accountingTransactionId: Int!
  isDraft: Boolean
  accountId: Int!
  accountingTransactionStatus: AccountingTransactionStatus!
  accountingTransactionType: AccountingTransactionType!
  amount: Decimal!
  amountDue: Decimal!
  amountPaid: Decimal!
  applyToContactID: Int!
  applyToContact: contact
  billToContactAddressId: Int
  billToContactAddress: contactAddress
  created: DateTime!
  createdBy: String!
  divisionId: Int!
  division: division!
  dueDate: DateTime!
  lastModified: DateTime!
  lastModifiedBy: String!
  note: String
  organizationId: Int!
  organization: organization!
  paidAs: PaidAs!
  paidDate: DateTime
  paymentTermsId: Int
  paymentTerm: paymentTerm
  transactionDate: DateTime!
  transactionNumber: String!
  customValues: MapOfObject
  updatedUser: user!
  createdUser: user!
  account: accountingAccount
  charges: [charge!]!
  payments: [payment!]
  jobs: [Job!]
}

type accountingTransactionPayment {
  accountingTransactionId: Int!
  amountApplied: Decimal!
  updatedUser: user!
  createdUser: user!
}

type actionEvent {
  eventId: UUID!
  created: DateTime!
  createdBy: String!
  errorMessage: String
  eventData: MapOfObject
  eventName: String!
  organizationId: Int!
  status: EventStatus!
}

type appManifest {
  appManifestId: UUID!
  author: String
  created: DateTime!
  createdBy: String!
  currentVersion: String
  description: String
  icon: String
  isEnabled: Boolean!
  isUpdateAvailable: Boolean!
  hasUnpublishedChanges: Boolean!
  isAutoUpdateEnabled: Boolean!
  gitSha: String
  lastModified: DateTime!
  lastModifiedBy: String!
  lastUpdateCheck: DateTime
  manifest: [MapOfObject!]
  name: String!
  organizationId: Int!
  repository: String
  repositoryBranch: String
  updatedUser: user!
  createdUser: user!
}

type appModule {
  appModuleId: UUID!
  organizationId: Int!
  appManifestId: UUID
  appModuleDocument: Any
  appModuleYamlDocument: String!
  publishedAppModuleYamlDocument: String
  hasUnpublishedChanges: Boolean!
  gitSha: String
  created: DateTime!
  createdBy: String!
  lastModified: DateTime!
  lastModifiedBy: String!
  name: String!
  appRoutes: [AppRouteGqlDto!]!
  appPermissions: [AppPermissionGqlDto!]!
  appComponents: [AppComponentGqlDto!]!
  appManifest: appManifest
  updatedUser: user!
  createdUser: user!
}

type applicationUserRole {
  id: String!
  name: String
  organizationId: Int
}

type carrierEquipment {
  carrierId: Int!
  equipmentTypeId: Int!
  quantity: Int!
}

type charge {
  chargeId: Int!
  accountingItemId: Int!
  accountingItem: accountingItem
  allowAutomaticUpdate: Boolean!
  amount: Decimal!
  applyBy: ApplyBy!
  applyToContactId: Int!
  applyToContact: contact
  calculatedOf: CalculatedOfTypes
  chargeStatus: ChargeStatus!
  chargeType: ChargeType!
  created: DateTime!
  createdBy: String!
  currencyId: Int!
  currency: currency
  description: String
  isConsolidated: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  note: String
  organizationId: Int
  paidAs: PaidAs!
  price: Decimal!
  quantity: Decimal!
  rateId: Int
  rate: rate
  salesTaxAmount: Decimal!
  salesTaxId: Int
  salesTaxRate: Decimal!
  amountAndTaxAmount: Decimal!
  showInDocuments: Boolean!
  totalAmount: Decimal!
  unit: String
  accountingTransactions: [accountingTransaction!]!
  orders: [order!]!
  salesTax: salesTax
  customValues: MapOfObject
}

type city {
  organizationId: Int!
  cityId: Int!
  cityName: String!
  countryCode: String!
  customValues: MapOfObject
  longitude: Float
  latitude: Float
  stateCode: String!
  created: DateTime!
  createdBy: String!
  lastModified: DateTime!
  lastModifiedBy: String!
  state: state!
  country: country!
  updatedUser: user!
  createdUser: user!
}

type commodity {
  getChildCommodities(filter: String): [commodity] @cost(weight: "10")
  getParentCommodity: commodity @cost(weight: "10")
  getRelatedOrders(filter: String): [order] @cost(weight: "10")
  getRelatedOrder(filter: String): order @cost(weight: "10")
  getRelatedOrdersForCommodity(filter: String): [order] @cost(weight: "10")
  getCommodityTrackingNumber(idPropertyName: String!): commodityTrackingNumber @cost(weight: "10")
  getCommodityAttachments(filter: String): [AttachmentGqlDto] @cost(weight: "10")
  commodityId: Int!
  commodityStatusId: Int
  commodityStatus: commodityStatus
  commodityTypeId: Int
  commodityType: commodityType
  containerCommodityId: Int
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  description: String!
  dimensionsUnit: DimensionsUnit!
  height: Decimal
  jobId: UUID
  job: Job
  lastModified: DateTime!
  lastModifiedBy: String!
  length: Decimal
  note: String
  organizationId: Int!
  packageTypeId: Int
  packageType: packageType
  inventoryItemId: Int
  inventoryItem: inventoryItem
  pieces: Int!
  quantity: Int
  unit: String
  unitaryValue: Decimal
  unitaryValueTotal: Decimal
  volumePiece: Decimal
  volumeTotal: Decimal
  volumeUnit: VolumeUnit!
  warehouseLocationId: Int
  warehouseLocation: warehouseLocation
  weight: Decimal
  weightByTotal: Boolean!
  weightTotal: Decimal
  weightUnit: WeightUnit!
  width: Decimal
  trackingNumbers: [commodityTrackingNumber!]
  orderCommodities: [orderCommodity!]
  containerCommodity: commodity
  containerCommodities: [commodity!]
  shipments(where: orderFilterInput @cost(weight: "10")): [order!]
  totalAmount: Decimal!
  updatedUser: user!
  createdUser: user!
  valueByTotal: Boolean!
  packageTypeName: String
  isDeleted: Boolean
  links: [LinkDto!]!
}

type commodityStatus {
  statusId: Int!
  created: DateTime!
  createdBy: String!
  description: String
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  priority: Int!
  statusName: String!
  statusStage: CommodityStatusStage!
  updatedUser: user!
  createdUser: user!
}

type commoditySummary {
  totalWeight: Decimal!
  totalPieces: Decimal
  totalQuantity: Decimal
  totalVolume: Decimal!
}

type commodityTrackingNumber {
  commodityTrackingNumberId: Int!
  commodityId: Int!
  created: DateTime!
  createdBy: String!
  isPrimary: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  syncOrderId: Int
  order: order
  trackingNumber: String!
  trackingNumberType: String
}

type commodityType {
  commodityTypeId: Int!
  code: String!
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  description: String
  isActive: Boolean
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  updatedUser: user!
  createdUser: user!
}

type contact {
  getContactAddressByType(addressType: String!): [contactAddress] @cost(weight: "10")
  getFirstContactAddressByType(addressType: String!): contactAddress @cost(weight: "10")
  getContactAttachments(filter: String, orderBy: String): [AttachmentGqlDto] @cost(weight: "10")
  getCustomValuesAttachment(filter: String): AttachmentGqlDto @cost(weight: "10")
  availableCredit: [AvailableCreditByCurrency] @cost(weight: "10")
  contactId: Int!
  accountNumber: String
  contactFirstName: String
  contactLastName: String
  contactStatusId: Int
  contactStatus: contactStatus
  contactType: ContactType!
  created: DateTime!
  createdBy: String!
  creditLimit: Decimal
  customValues: MapOfObject
  divisionId: Int!
  division: division
  emailAddress: String
  entityTypeId: Int
  faxNumber: String
  idNumber: String
  idNumberType: IDNumberType
  isACorporation: Boolean
  isDeleted: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  mobilePhoneNumber: String
  name: String!
  organizationId: Int!
  paidAs: PaidAs
  paymentTermId: Int
  paymentTerm: paymentTerm
  parentContactId: Int
  parentContact: contact
  phoneNumber: String
  tags: [String!]
  website: String
  userEmployee: userEmployee
  contactAddresses(where: contactAddressFilterInput @cost(weight: "10")): [contactAddress!]
  contacts(where: contactFilterInput @cost(weight: "10")): [contact!]
  contactLinks(where: contactLinkFilterInput @cost(weight: "10")): [contactLink!]
  linkToContactLinks(where: contactLinkFilterInput @cost(weight: "10")): [contactLink!]
  discounts(where: discountFilterInput @cost(weight: "10")): [discount!]
  updatedUser: user!
  createdUser: user!
}

type contactAddress {
  formattedAddress(
    outputFormat: String
    addressFormat: String
    lang: String = "en-US"
    multiline: Boolean = false
  ): String @cost(weight: "10")
  contactAddressId: Int!
  isInactive: Boolean
  addressLine: String!
  addressLine2: String
  addressType: AddressType!
  cityName: String
  contactId: Int!
  countryCode: String
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  lastModified: DateTime!
  lastModifiedBy: String!
  location: [Float!]
  longitude: Float
  latitude: Float
  organizationId: Int!
  postalCode: String
  stateCode: String
  city: city
  state: state
  country: country
  contact: contact
}

type contactAddressDistanceLookup {
  contactAddressId: Int!
  addressLine: String!
  addressLine2: String
  addressType: AddressType!
  cityName: String
  contactId: Int!
  countryCode: String
  customValues: MapOfObject
  longitude: Float
  latitude: Float
  organizationId: Int!
  postalCode: String
  stateCode: String
  state: state
  country: country
  contact: contact
  location: MapOfPoint
  distance: Float
}

type contactLink {
  contactId: Int!
  linkToContactId: Int!
  linkToContactAddressId: Int
  contact: contact!
  linkToContact: contact!
  linkToContactAddress: contactAddress
  contactLinkType: ContactLinkType!
}

type contactPaymentMethod {
  contactPaymentMethodId: String!
  cardHolderName: String!
  contactId: Int!
  customerId: String!
  paymentDataEncrypted: [Byte!]!
  description: String
  expDate: String!
  paymentType: PaymentType!
  customValues: MapOfObject
  contact: contact
  isVerified: Boolean
  isDeleted: Boolean!
  created: DateTime!
}

type contactStatus {
  statusId: Int!
  contactType: ContactType!
  created: DateTime!
  createdBy: String!
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  priority: Int!
  statusDescription: String
  statusName: String!
  statusStage: ContactStatusStage!
  updatedUser: user!
  createdUser: user!
}

type containerDescription {
  organizationId: Int!
  containerDescriptionCode: String!
  created: DateTime!
  createdBy: String!
  description: String!
  lastModified: DateTime!
  lastModifiedBy: String!
  updatedUser: user!
  createdUser: user!
}

type containerType {
  organizationId: Int!
  containerTypeCode: String!
  created: DateTime!
  createdBy: String!
  description: String!
  lastModified: DateTime!
  lastModifiedBy: String!
  updatedUser: user!
  createdUser: user!
}

type country {
  organizationId: Int!
  countryCode: String!
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  lastModified: DateTime!
  lastModifiedBy: String!
  name: String!
  states(where: stateFilterInput @cost(weight: "10")): [state!]
  updatedUser: user!
  createdUser: user!
}

type currency {
  currencyId: Int!
  created: DateTime!
  createdBy: String!
  currencyCode: String!
  currencyName: String
  decimalPlaces: Int
  exchangeRateLastUpdate: DateTime
  exchangeRateToPrimary: Decimal
  gainLossAccountId: Int
  gainLossAccount: accountingItem
  isInactive: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  symbol: String
  updatedUser: user!
  createdUser: user!
}

type customCode {
  id: Int!
  code: String!
  codeType: CustomCodeTypes!
  created: DateTime!
  createdBy: String!
  description: String!
  isCommonlyUsed: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  updatedUser: user!
  createdUser: user!
}

type discount {
  discountId: Int!
  accountingItemId: Int!
  activationCount: Int!
  activationLimit: Int
  created: DateTime!
  createdBy: String!
  customValues: [MapOfObject!]
  description: String
  endDate: DateTime!
  isActive: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  minimumChargeAmount: Decimal
  name: String
  organizationId: Int!
  promoCode: String
  startDate: DateTime!
  targetContactTags: [String!]
  type: DiscountType!
  usageLimit: Int
  usedCount: Int!
  value: Decimal!
  minimumWeight: Decimal!
  minimumWeightUnit: WeightUnit!
  carriers(where: contactFilterInput @cost(weight: "10")): [contact!]
  transportationModes(where: modeOfTransportationFilterInput @cost(weight: "10")): [modeOfTransportation!]
  destinationCountries(where: countryFilterInput @cost(weight: "10")): [country!]
  validationWorkflows(where: workflowFilterInput @cost(weight: "10")): [workflow!]
}

type division {
  divisionId: Int!
  airAmsOriginatorCode: String
  assignDivisionToEntities: Boolean!
  city: String
  comments: String
  countryCode: String
  country: country
  created: DateTime!
  createdBy: String!
  divisionName: String!
  email: String
  faxNumber: String
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  phoneNumber: String
  portId: String
  port: port
  stateCode: String
  state: state
  streetAndNumber: String
  useDivisionInDocumentHeaders: Boolean!
  zipCode: String
  updatedUser: user!
  createdUser: user!
}

type entityField {
  entityFieldId: Int!
  created: DateTime!
  createdBy: String!
  entityTypeId: Int!
  fieldDefinition: MapOfObject
  isCustomField: Boolean!
  isInactive: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  name: String
  organizationId: Int!
  updatedUser: user!
  createdUser: user!
}

type equipmentType {
  equipmentTypeId: Int!
  created: DateTime!
  createdBy: String!
  lastModified: DateTime!
  lastModifiedBy: String!
  name: String!
  organizationId: Int!
  updatedUser: user!
  createdUser: user!
}

type equipmentTypesWithDetails {
  carrierId: Int
  equipmentTypeId: Int
  quantity: Int
  equipmentName: String!
}

type eventDefinition {
  eventDefinitionId: Int!
  created: DateTime!
  createdBy: String!
  customValues: Any
  description: String
  eventName: String!
  includeInTracking: Boolean!
  isAutomaticCreate: Boolean!
  isInactive: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  location: String
  organizationId: Int!
  sendEmail: Boolean!
  sendEmailDocumentId: Int
  triggerConditionFields: String
  triggerEntityName: String
  triggerEventName: String
  updatedUser: user!
  createdUser: user!
}

type inventoryItem {
  getContact(idPropertyName: String): contact @cost(weight: "10")
  inventoryItemId: Int!
  availableQuantity: Int!
  backOrderQuantity: Int!
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  customerContactId: Int
  customerContact: contact
  description: String
  productName: String
  dimensionsUnit: DimensionsUnit!
  height: Decimal
  isInactive: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  length: Decimal
  manufacturerContactId: Int
  manufacturerContact: contact
  modelNumber: String
  organizationId: Int!
  packageTypeId: Int
  packageType: packageType
  sku: String!
  useSerialNumbers: Boolean!
  volumePiece: Decimal
  volumeUnit: VolumeUnit!
  weight: Decimal
  weightUnit: WeightUnit!
  width: Decimal
  updatedUser: user!
  createdUser: user!
}

type jobStatus {
  jobStatusId: Int!
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  jobStatusName: String!
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  priority: Int!
  statusStage: StatusStage!
  updatedUser: user!
  createdUser: user!
}

type knowledgeAsset {
  knowledgeAssetId: UUID!
  allowIndexing: Boolean!
  contentType: String!
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  errorMessage: String
  indexedAt: DateTime
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  plainText: String
  plainTextAttachmentId: Int
  plainTextAttachment: AttachmentGqlDto
  processedAt: DateTime
  sourceAttachmentId: Int
  sourceAttachment: AttachmentGqlDto
  sourceUrl: String
  status: KnowledgeAssetStatus!
  tags: [String!]!
  title: String!
  updatedUser: user!
  createdUser: user!
}

type lane {
  id: Int!
  contactId: Int!
  contact: contact!
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  description: String
  destinationPortId: String
  destinationPort: port
  originPortId: String
  originPort: port
  destinationCityId: Int
  destinationCity: city
  originCityId: Int
  originCity: city
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  modeOfTransportations: [modeOfTransportation!]
  updatedUser: user!
  createdUser: user!
}

type linkedOrders {
  sourceOrderId: Int!
  targetOrderId: Int!
  isDeleted: Boolean!
  customValues: MapOfObject
  created: DateTime!
  createdBy: String!
  lastModified: DateTime!
  lastModifiedBy: String!
  sourceOrder: order!
  targetOrder: order!
}

type modeOfTransportation {
  modeOfTransportationId: Int!
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  description: String!
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  transportationMethod: TransportationMethod!
  transportationMethodDescription: TransportationMethodDescription!
  usCustomsCode: String!
  updatedUser: user!
  createdUser: user!
}

type order {
  getContact(idPropertyName: String!): contact @cost(weight: "10")
  getPort(idPropertyName: String!): port @cost(weight: "10")
  getCustomCode(idPropertyName: String!): customCode @cost(weight: "10")
  getVessel(idPropertyName: String!): vessel @cost(weight: "10")
  getCountry(idPropertyName: String!): country @cost(weight: "10")
  getModeOfTransportation(idPropertyName: String!): modeOfTransportation @cost(weight: "10")
  getAccountingTransactions(filter: String, orderBy: String): [accountingTransaction] @cost(weight: "10")
  getRelatedOrders(filter: String): [order] @cost(weight: "10")
  getOrderJobsRelatedOrders(filter: String): [order] @cost(weight: "10")
  getOrderAttachments(filter: String): [AttachmentGqlDto] @cost(weight: "10")
  getOrderEntityByType(
    idPropertyName: String!
    customValuesKey: String
    customValuesValue: String
    filter: String
  ): orderEntity @cost(weight: "10")
  getCharge(chargeDescription: String): charge @cost(weight: "10")
  getChargesByChargeType(chargeType: String!): [charge] @cost(weight: "10")
  getOrderSummary(weightUnit: String, volumeUnit: String, dimensionsUnit: String): OrderSummaryGqlDto
    @cost(weight: "10")
  lastTrackingEvent(eventDefinitionName: String): trackingEvent @cost(weight: "10")
  getRoute(idPropertyName: String!): route @cost(weight: "10")
  getRelatedOrderByProperty(idPropertyName: String): order @cost(weight: "10")
  outgoingLinks: [linkedOrders] @cost(weight: "10")
  incomingLinks: [linkedOrders] @cost(weight: "10")
  orderId: Int!
  isDraft: Boolean
  billToContactId: Int
  billToContact: contact
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  divisionId: Int!
  division: division
  employeeContactId: Int
  employeeContact: contact
  entityTypeId: Int
  equipmentTypeId: Int
  equipmentType: equipmentType
  lastModified: DateTime!
  lastModifiedBy: String!
  lastOrderStatusModified: DateTime
  orderNumber: String!
  orderStatusId: Int!
  orderStatus: orderStatus
  orderType: OrderTypes!
  organizationId: Int!
  organization: organization!
  salespersonContactId: Int
  salespersonContact: contact
  trackingNumber: String
  orderDocuments(where: orderDocumentFilterInput @cost(weight: "10")): [orderDocument!]!
  orderEntities(where: orderEntityFilterInput @cost(weight: "10")): [orderEntity!]!
  orderCarriers(where: orderCarrierFilterInput @cost(weight: "10")): [orderCarrier!]!
  orderEntityCarriers: [orderEntity!]!
  orderEntityVendors: [orderEntity!]!
  orderEntityPickups: [orderEntity!]!
  orderEntityDeliveries: [orderEntity!]!
  orderEntityDeliveryCarriers: [orderEntity!]!
  orderEntityDeliverTo: [orderEntity!]!
  orderEntityDestinationAgent: [orderEntity!]!
  orderEntityReceivedBy: [orderEntity!]!
  orderEntityPickupFrom: [orderEntity!]!
  orderEntityForwardingAgent: [orderEntity!]!
  orderEntityIntermediate: [orderEntity!]!
  orderEntityNotifyParty: [orderEntity!]!
  orderEntityUltimateConsignee: [orderEntity!]!
  orderEntityUsppi: [orderEntity!]!
  charges(where: chargeFilterInput @cost(weight: "10")): [charge!]!
  orderCommodities(where: orderCommodityFilterInput @cost(weight: "10")): [orderCommodity!]!
  trackingEvents(where: trackingEventFilterInput @cost(weight: "10")): [trackingEvent!]!
  shipments(where: orderFilterInput @cost(weight: "10")): [order!]!
  invoices(where: accountingTransactionFilterInput @cost(weight: "10")): [accountingTransaction!]!
  jobs(where: JobFilterInput @cost(weight: "10")): [Job!]!
  jobOrders(where: JobOrderGqlDtoFilterInput @cost(weight: "10")): [JobOrderGqlDto!]!
  attachments(where: AttachmentGqlDtoFilterInput @cost(weight: "10")): [AttachmentGqlDto!]
  carriers(where: contactFilterInput @cost(weight: "10")): [contact!]!
  updatedUser: user!
  createdUser: user!
  commoditySummary: commoditySummary!
  accountingSummary: accountingSummary!
  links: [LinkDto!]!
}

type orderCarrier {
  orderCarrierId: Int!
  orderId: Int!
  carrierId: Int!
  carrier: contact!
}

type orderCommodity {
  commodityId: Int!
  commodity: commodity
  orderId: Int!
  order: order
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  lastModified: DateTime!
  lastModifiedBy: String!
}

type orderDocument {
  getLinkToDocument(expiresInDays: Int!): String @cost(weight: "10")
  orderDocumentId: Int!
  created: DateTime!
  createdBy: String!
  documentTemplateId: Int!
  lastGeneratedFile: String
  lastGeneratedTime: DateTime
  lastModified: DateTime!
  lastModifiedBy: String!
  documentTemplate: DocumentTemplateGqlDto
  metadata: MapOfObject
  orderId: Int!
  regenerateOnOrderChange: Boolean!
  linkToDocument: String!
  updatedUser: user!
  createdUser: user!
}

type orderEntity {
  getOrderEntityAttachments(
    idPropertyName: String!
    filter: String
    orderBy: String
    search: String
  ): [AttachmentGqlDto] @cost(weight: "10")
  orderEntityId: Int!
  contactAddressId: Int
  contactAddress: contactAddress
  contactId: Int
  contact: contact
  contactName: String
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  entityType: EntityTypes
  lastModified: DateTime!
  lastModifiedBy: String!
  nonContactName: String
  orderEntitySequence: Int!
  orderId: Int!
  isDeleted: Boolean
  attachments(where: AttachmentGqlDtoFilterInput @cost(weight: "10")): [AttachmentGqlDto!]!
}

type orderStatus {
  orderStatusId: Int!
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  lastModified: DateTime!
  lastModifiedBy: String!
  orderStatusDescription: String
  orderStatusName: String!
  orderType: OrderTypes!
  organizationId: Int!
  priority: Int!
  requireConfirmation: Boolean!
  statusStage: StatusStage!
  updatedUser: user!
  createdUser: user!
}

type organization {
  getCustomValueAttachment(customValueName: String!): AttachmentGqlDto @cost(weight: "10")
  organizationId: Int!
  addressLine: String
  addressLine2: String
  cityName: String
  companyName: String!
  countryCode: String
  created: DateTime!
  createdBy: String!
  faxNumber: String
  lastModified: DateTime!
  lastModifiedBy: String!
  phoneNumber: String
  postalCode: String
  stateCode: String
  customValues: MapOfObject
  uniqueId: UUID!
}

type organizationConfig {
  organizationConfigId: Int!
  configName: String!
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  configurationDefinition: MapOfObject
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  updatedUser: user!
  createdUser: user!
}

type packageCategory {
  organizationId: Int!
  packageCategoryCode: String!
  created: DateTime!
  createdBy: String!
  isContainer: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  name: String!
  updatedUser: user!
  createdUser: user!
}

type packageType {
  packageTypeId: Int!
  air: Boolean!
  containerDescriptionCode: String
  containerDescription: containerDescription
  containerTypeCode: String
  containerType: containerType
  created: DateTime!
  createdBy: String!
  ground: Boolean!
  height: Decimal!
  lastModified: DateTime!
  lastModifiedBy: String!
  length: Decimal!
  maximumWeight: Decimal!
  name: String!
  ocean: Boolean!
  organizationId: Int!
  packageCategoryCode: String!
  packageCategory: packageCategory!
  volume: Decimal!
  weight: Decimal!
  width: Decimal!
  updatedUser: user!
  createdUser: user!
}

type payment {
  paymentId: Int!
  accountingAccountId: Int!
  accountingAccount: accountingAccount!
  amountReceived: Decimal!
  applyToContactId: Int!
  applyToContact: contact
  checkNumber: String!
  created: DateTime!
  createdBy: String!
  currencyId: Int!
  currency: currency!
  customValues: MapOfObject
  divisionId: Int!
  division: division!
  lastModified: DateTime!
  lastModifiedBy: String!
  memo: String!
  organizationId: Int!
  paymentDate: DateTime!
  paymentStatus: PaymentStatus!
  accountingTransactions: [accountingTransaction!]
  accountingTransactionPayments: [accountingTransactionPayment!]!
  updatedUser: user!
  createdUser: user!
}

type paymentTerm {
  paymentTermId: Int!
  created: DateTime!
  createdBy: String!
  description: String!
  discountPaidWithinDays: Int
  discountPercentage: Int
  isInactive: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  netDueDays: Int!
  organizationId: Int!
  updatedUser: user!
  createdUser: user!
}

type port {
  organizationId: Int!
  portId: String!
  countryCode: String!
  created: DateTime!
  createdBy: String!
  isAir: Boolean!
  isBorderCrossingPoint: Boolean!
  isMail: Boolean!
  isMariTime: Boolean!
  isMyCompany: Boolean!
  isRail: Boolean!
  isRoad: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  name: String!
  portRemarks: String
  stateCode: String
  country: country
  state: state
  updatedUser: user!
  createdUser: user!
}

type postalCode {
  id: Int!
  accuracy: AccuracyTypes
  code: String!
  countryCode: String!
  country: country!
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  lastModified: DateTime!
  lastModifiedBy: String!
  location: [Float!]
  longitude: Float
  latitude: Float
  organizationId: Int!
  placeName: String!
  stateCode: String
  state: state
  updatedUser: user!
  createdUser: user!
}

type rate {
  getEstimatedCost(lang: String): String @cost(weight: "10")
  rateId: Int!
  rateNumber: String
  accountingItemId: Int
  accountingItem: accountingItem
  amendmentNumber: String
  applyToDestinationCountry: Boolean
  applyToOriginCountry: Boolean
  automaticallyCreateCharge: Boolean!
  carrierId: Int
  carrier: contact
  clientId: Int
  client: contact
  commodityTypeId: Int
  commodityType: commodityType
  contractNumber: String
  countryOfDestinationCode: String
  countryOfDestination: country
  countryOfOriginCode: String
  countryOfOrigin: country
  routeId: Int
  route: route
  routeLegId: Int
  routeLeg: routeLeg
  created: DateTime!
  createdBy: String!
  currencyId: Int
  currency: currency
  customValues: MapOfObject
  effectiveDate: DateTime
  expirationDate: DateTime
  finalMileCarrierId: Int
  finalMileCarrier: contact
  frequency: Frequency
  isHazardous: Boolean
  lastModified: DateTime!
  lastModifiedBy: String!
  modeOfTransportationId: Int
  modeOfTransportation: modeOfTransportation
  notes: String
  organizationId: Int!
  portOfDeliveryId: String
  portOfDelivery: port
  portOfLoadingId: String
  portOfLoading: port
  portOfReceiptId: String
  portOfReceipt: port
  portOfUnloadingId: String
  portOfUnloading: port
  rateType: RateType!
  serviceType: ServiceType
  tariff: Any
  transitDaysMax: Int
  transitDaysMin: Int
  updatedUser: user!
  createdUser: user!
}

type role {
  id: String!
  name: String
}

type route {
  routeId: Int!
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  divisionId: Int
  division: division
  enabled: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  mainCarrierId: Int
  mainCarrier: contact
  name: String
  organizationId: Int!
  portOfLoadingId: String
  portOfLoading: port
  portOfUnloadingId: String
  portOfUnloading: port
  transitTimeDays: TimeSpanScalar
  transitTimeDaysInt: Int!
  transitTimeOverride: Boolean!
  transportationMethod: TransportationMethod!
  updatedUser: user!
  createdUser: user!
  isDraft: Boolean!
  rates(where: rateFilterInput @cost(weight: "10")): [rate!]
  routeLegs(where: routeLegFilterInput @cost(weight: "10")): [routeLeg!]
  routeRouteLegs(where: routeRouteLegFilterInput @cost(weight: "10")): [routeRouteLeg!]
}

type routeLeg {
  routeLegId: Int!
  carrierId: Int
  carrier: contact
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  enabled: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  name: String
  organizationId: Int!
  pointOfDestinationId: String
  pointOfDestination: port
  pointOfOriginId: String
  pointOfOrigin: port
  transitTimeDays: TimeSpan!
  transitTimeDaysInt: Int!
  transportationMethod: TransportationMethod!
  volumeWeightFactor: Decimal
  updatedUser: user!
  createdUser: user!
  isDraft: Boolean!
  rates(where: rateFilterInput @cost(weight: "10")): [rate!]
  routes(where: routeFilterInput @cost(weight: "10")): [route!]
  routeRouteLegs(where: routeRouteLegFilterInput @cost(weight: "10")): [routeRouteLeg!]
}

type routeRouteLeg {
  routeId: Int!
  route: route!
  routeLegId: Int!
  routeLeg: routeLeg!
  routeRouteLegsSequence: Int!
  created: DateTime!
  createdBy: String!
  lastModified: DateTime!
  lastModifiedBy: String!
}

type salesTax {
  salesTaxId: Int!
  authorityContactId: Int
  authorityContact: contact
  created: DateTime!
  createdBy: String!
  description: String!
  isGroupTax: Boolean!
  isInactive: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  parentSalesTaxId: Int
  rate: Decimal!
  taxCode: String!
  updatedUser: user!
  createdUser: user!
}

type search {
  entityId: String
  entityName: String
  entityType: String
  displayText: String
}

type state {
  organizationId: Int!
  countryCode: String!
  stateCode: String!
  created: DateTime!
  createdBy: String!
  customValues: MapOfObject
  lastModified: DateTime!
  lastModifiedBy: String!
  name: String!
  country: country!
  updatedUser: user!
  createdUser: user!
}

type trackingEvent {
  trackingEventId: Int!
  created: DateTime!
  createdBy: String!
  customValues: Any
  description: String
  eventDate: DateTime
  eventDefinitionId: Int!
  eventDefinition: eventDefinition!
  includeInTracking: Boolean!
  isInactive: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  location: String
  sendEmail: Boolean!
  updatedUser: user!
  createdUser: user!
}

type user {
  permissions(organizationId: Int!): [AppPermissionGqlDto] @cost(weight: "10")
  contact(organizationId: Int!): contact @cost(weight: "10")
  id: String!
  firstName: String!
  lastName: String!
  userName: String
  email: String
  emailConfirmed: Boolean!
  paymentMethodConfirmed: Boolean!
  acknowledgementConfirmed: Boolean!
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  isInactive: Boolean!
  created: DateTime
  lastModified: DateTime
  userEmployees: [userEmployee!]!
}

type userEmployee {
  userContact: contact @cost(weight: "10")
  userEmployeeId: Int!
  created: DateTime!
  createdBy: String!
  employeeContactId: Int!
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  userId: String!
  user: user!
  visibleTransactions: VisibleTransactions!
  userGroups: [userGroup!]!
  updatedUser: user!
  createdUser: user!
}

type userGroup {
  userGroupId: Int!
  created: DateTime!
  createdBy: String!
  description: String!
  lastModified: DateTime!
  lastModifiedBy: String!
  name: String!
  organizationId: Int!
  updatedUser: user!
  createdUser: user!
}

type userGroupRole {
  roleId: String!
  userGroupId: Int!
  roleName: String!
}

type userSetting {
  userSettingId: Int!
  created: DateTime!
  createdBy: String!
  lastModified: DateTime!
  lastModifiedBy: String!
  name: String!
  organizationId: Int!
  settings: MapOfObject
  userId: String
  updatedUser: user!
  createdUser: user!
}

type vessel {
  vesselId: Int!
  carrierId: Int
  carrier: contact
  countryCode: String
  country: country
  created: DateTime!
  createdBy: String!
  lastModified: DateTime!
  lastModifiedBy: String!
  name: String!
  organizationId: Int!
  vesselCode: String
  updatedUser: user!
  createdUser: user!
}

type warehouseLocation {
  warehouseLocationId: Int!
  code: String!
  created: DateTime!
  createdBy: String!
  customerId: Int
  customer: contact
  description: String
  height: Decimal
  isInactive: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  length: Decimal
  locationType: LocationType!
  maximumWeight: Decimal
  organizationId: Int!
  parentZoneId: Int
  parentWarehouseZone: warehouseZone
  width: Decimal
  updatedUser: user!
  createdUser: user!
}

type warehouseZone {
  warehouseZoneId: Int!
  created: DateTime!
  createdBy: String!
  customerId: Int
  customer: contact
  description: String
  divisionId: Int
  division: division
  lastModified: DateTime!
  lastModifiedBy: String!
  name: String!
  organizationId: Int!
  parentZoneId: Int
  parentWarehouseZone: warehouseZone
  updatedUser: user
  createdUser: user!
}

type workflow {
  workflowId: UUID!
  organizationId: Int!
  created: DateTime
  createdBy: String
  isActive: Boolean
  lastModified: DateTime
  lastModifiedBy: String
  workflowDocument: WorkflowDocument
  workflowYamlDocument: String!
  publishedWorkflowYamlDocument: String
  hasUnpublishedChanges: Boolean!
  gitSha: String
  tags: [String!]
  appManifestId: UUID
  appManifest: appManifest
  updatedUser: user!
  createdUser: user!
}

input AccountTypeOperationFilterInput {
  eq: AccountType @cost(weight: "10")
  neq: AccountType @cost(weight: "10")
  in: [AccountType!] @cost(weight: "10")
  nin: [AccountType!] @cost(weight: "10")
}

input AccountingTransactionPaymentDtoInput {
  accountingTransactionId: Int!
  amountApplied: Decimal!
}

input AccountingTransactionStatusOperationFilterInput {
  eq: AccountingTransactionStatus @cost(weight: "10")
  neq: AccountingTransactionStatus @cost(weight: "10")
  in: [AccountingTransactionStatus!] @cost(weight: "10")
  nin: [AccountingTransactionStatus!] @cost(weight: "10")
}

input AccountingTransactionTypeOperationFilterInput {
  eq: AccountingTransactionType @cost(weight: "10")
  neq: AccountingTransactionType @cost(weight: "10")
  in: [AccountingTransactionType!] @cost(weight: "10")
  nin: [AccountingTransactionType!] @cost(weight: "10")
}

input AddUserToUserGroupInput {
  organizationId: Int!
  userGroupId: Int!
  userId: String!
}

input AddressTypeOperationFilterInput {
  eq: AddressType @cost(weight: "10")
  neq: AddressType @cost(weight: "10")
  in: [AddressType!] @cost(weight: "10")
  nin: [AddressType!] @cost(weight: "10")
}

input ApplicationUserRoleDtoInput {
  id: String!
  name: String!
  normalizedName: String!
}

input ApplyByOperationFilterInput {
  eq: ApplyBy @cost(weight: "10")
  neq: ApplyBy @cost(weight: "10")
  in: [ApplyBy!] @cost(weight: "10")
  nin: [ApplyBy!] @cost(weight: "10")
}

input AttachmentGqlDtoFilterInput {
  and: [AttachmentGqlDtoFilterInput!]
  or: [AttachmentGqlDtoFilterInput!]
  attachmentId: IntOperationFilterInput
  attachmentGuid: UuidOperationFilterInput
  attachmentType: AttachmentTypeOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  description: StringOperationFilterInput
  fileName: StringOperationFilterInput
  fileUri: StringOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  parentId: StringOperationFilterInput
  parentType: AttachmentParentTypeOperationFilterInput
  previewUri: StringOperationFilterInput
  thumbnailUri: StringOperationFilterInput
  presignedFileUri: StringOperationFilterInput
  presignedPreviewUri: StringOperationFilterInput
  presignedThumbnailUri: StringOperationFilterInput
  isImage: BooleanOperationFilterInput
  isPdf: BooleanOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
}

input AttachmentParentTypeOperationFilterInput {
  eq: AttachmentParentType @cost(weight: "10")
  neq: AttachmentParentType @cost(weight: "10")
  in: [AttachmentParentType!] @cost(weight: "10")
  nin: [AttachmentParentType!] @cost(weight: "10")
}

input AttachmentTypeOperationFilterInput {
  eq: AttachmentType @cost(weight: "10")
  neq: AttachmentType @cost(weight: "10")
  in: [AttachmentType!] @cost(weight: "10")
  nin: [AttachmentType!] @cost(weight: "10")
}

input BooleanOperationFilterInput {
  eq: Boolean @cost(weight: "10")
  neq: Boolean @cost(weight: "10")
}

input BusinessHourInput {
  calendarBusinessHourId: Int
  dayOfWeek: Int!
  startTime: TimeSpan!
  endTime: TimeSpan!
  label: String
  customValues: MapOfObject
}

input CalendarAvailabilityRecurrenceRuleDtoInput {
  frequency: CalendarRecurrenceFrequency!
  interval: Int
  byDay: [String!]
  byMonth: [Int!]
  byMonthDay: [Int!]
  until: DateTime
  count: Int
}

input CalendarRecurrenceRuleDtoInput {
  frequency: CalendarRecurrenceFrequency!
  interval: Int
  byDay: [String!]
  byMonth: [Int!]
  byMonthDay: [Int!]
  until: DateTime
  count: Int
}

input CarrierEquipmentDtoInput {
  carrierId: Int!
  equipmentTypeId: Int!
  quantity: Int!
}

input ChangePasswordUserInput {
  userId: String!
  password: String!
}

input ChargeStatusOperationFilterInput {
  eq: ChargeStatus @cost(weight: "10")
  neq: ChargeStatus @cost(weight: "10")
  in: [ChargeStatus!] @cost(weight: "10")
  nin: [ChargeStatus!] @cost(weight: "10")
}

input ChargeTypeOperationFilterInput {
  eq: ChargeType @cost(weight: "10")
  neq: ChargeType @cost(weight: "10")
  in: [ChargeType!] @cost(weight: "10")
  nin: [ChargeType!] @cost(weight: "10")
}

input CommodityStatusStageOperationFilterInput {
  eq: CommodityStatusStage @cost(weight: "10")
  neq: CommodityStatusStage @cost(weight: "10")
  in: [CommodityStatusStage!] @cost(weight: "10")
  nin: [CommodityStatusStage!] @cost(weight: "10")
}

input ComponentInputFilterInput {
  and: [ComponentInputFilterInput!]
  or: [ComponentInputFilterInput!]
  name: StringOperationFilterInput
  type: StringOperationFilterInput
  props: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
}

input ConcurrencyFilterInput {
  and: [ConcurrencyFilterInput!]
  or: [ConcurrencyFilterInput!]
  enabled: BooleanOperationFilterInput
  group: StringOperationFilterInput
  waitTime: IntOperationFilterInput
}

input ConditionFilterInput {
  and: [ConditionFilterInput!]
  or: [ConditionFilterInput!]
  expression: StringOperationFilterInput
}

input ContactDtoInput {
  contactId: Int!
  accountNumber: String
  contactFirstName: String
  contactLastName: String
  contactType: ContactType!
  parentContactId: Int
  created: DateTime!
  createdBy: String!
  createdByUserName: String!
  divisionId: Int!
  divisionName: String
  emailAddress: String
  faxNumber: String
  idNumber: String
  idNumberType: IDNumberType
  lastModified: DateTime!
  lastModifiedBy: String!
  lastModifiedByUserName: String!
  mobilePhoneNumber: String
  name: String!
  organizationId: Int!
  isDeleted: Boolean
  linkToContactId: Int
  linkToContactName: String
  contactLinkType: ContactLinkType
  phoneNumber: String
  website: String
  paymentTermId: Int
  paymentTermDescription: String
  tags: [String!]
  userEmployee: UserEmployeeDtoInput
  creditLimit: Decimal
  paidAs: PaidAs
  isACorporation: Boolean
  carrierEquipments: [CarrierEquipmentDtoInput!]!
  customValues: [MapOfObject!]
  contactStatusId: Int
  contactStatus: ContactStatusDtoInput
  discounts: [DiscountDtoInput!]!
  links: [LinkDtoInput!]!
}

input ContactLinkTypeOperationFilterInput {
  eq: ContactLinkType @cost(weight: "10")
  neq: ContactLinkType @cost(weight: "10")
  in: [ContactLinkType!] @cost(weight: "10")
  nin: [ContactLinkType!] @cost(weight: "10")
}

input ContactStatusDtoInput {
  statusId: Int!
  contactType: ContactType!
  created: DateTime!
  createdBy: String!
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  priority: Int!
  statusDescription: String
  statusName: String!
  statusStage: ContactStatusStage!
  createdUserFirstName: String
  createdUserLastName: String
  createdUserNormalizedUserName: String
  createdUserUserName: String
  updatedUserFirstName: String
  updatedUserLastName: String
  updatedUserNormalizedUserName: String
  updatedUserUserName: String
  links: [LinkDtoInput!]!
}

input ContactStatusStageOperationFilterInput {
  eq: ContactStatusStage @cost(weight: "10")
  neq: ContactStatusStage @cost(weight: "10")
  in: [ContactStatusStage!] @cost(weight: "10")
  nin: [ContactStatusStage!] @cost(weight: "10")
}

input ContactTypeOperationFilterInput {
  eq: ContactType @cost(weight: "10")
  neq: ContactType @cost(weight: "10")
  in: [ContactType!] @cost(weight: "10")
  nin: [ContactType!] @cost(weight: "10")
}

input CreateAccountingAccountCommandValuesInput {
  accountName: String!
  accountNumber: String
  accountType: AccountType!
  isInactive: Boolean!
  parentAccountId: Int
}

input CreateAccountingAccountInput {
  organizationId: Int!
  values: CreateAccountingAccountCommandValuesInput!
}

input CreateAccountingItemCommandValuesInput {
  accountId: Int!
  description: String!
  isInactive: Boolean!
  itemCode: String
  itemType: ItemType!
  price: Decimal
  salesTaxId: Int
  tariff: TariffOptionsInput
  customValues: [MapOfObject!]
}

input CreateAccountingItemInput {
  organizationId: Int!
  values: CreateAccountingItemCommandValuesInput!
}

input CreateAccountingTransactionCommandValuesInput {
  divisionId: Int!
  accountId: Int
  accountingTransactionType: AccountingTransactionType!
  applyToContactID: Int
  billToContactAddressId: Int
  dueDate: DateTime
  note: String
  paymentTermsId: Int
  transactionDate: DateTime!
  charges: [CreateChargeCommandValuesInput!]!
  transactionNumber: String!
  paidAs: PaidAs!
  isDraft: Boolean
}

input CreateAccountingTransactionInput {
  organizationId: Int!
  values: CreateAccountingTransactionCommandValuesInput!
}

input CreateActionEventCommandValuesInput {
  errorMessage: String
  eventData: MapOfObject
  eventName: String!
  status: EventStatus
}

input CreateActionEventInput {
  organizationId: Int!
  values: CreateActionEventCommandValuesInput!
}

input CreateAppManifestCommandValuesInput {
  author: String
  currentVersion: String
  description: String
  icon: String
  isEnabled: Boolean
  isUpdateAvailable: Boolean
  lastUpdateCheck: DateTime
  manifest: [MapOfObject!]
  name: String
  repository: String
  repositoryBranch: String
  appManifestId: UUID
  isAutoUpdateEnabled: Boolean
}

input CreateAppManifestInput {
  organizationId: Int!
  values: CreateAppManifestCommandValuesInput!
}

input CreateAppModuleCommandValuesInput {
  appManifestId: UUID
  appModuleYamlDocument: String!
}

input CreateAppModuleInput {
  organizationId: Int!
  values: CreateAppModuleCommandValuesInput!
}

input CreateAttachmentCommandValuesInput {
  attachmentType: AttachmentType!
  description: String
  fileName: String!
  parentId: String
  parentType: AttachmentParentType!
  prefix: String
  bytesArray: [Byte!]
  fileUrl: String
  customValues: [MapOfObject!]
}

input CreateAttachmentInput {
  organizationId: Int!
  values: CreateAttachmentCommandValuesInput!
}

input CreateCalendarAvailabilityBlockCommandValuesInput {
  start: DateTime!
  end: DateTime!
  isAvailable: Boolean!
  description: String
  customValues: MapOfObject
  recurrenceRule: CalendarAvailabilityRecurrenceRuleDtoInput
}

input CreateCalendarAvailabilityBlockInput {
  calendarId: Int!
  values: CreateCalendarAvailabilityBlockCommandValuesInput!
}

input CreateCalendarBusinessHourCommandValuesInput {
  dayOfWeek: Int!
  startTime: TimeSpan!
  endTime: TimeSpan!
  label: String
  customValues: MapOfObject
}

input CreateCalendarBusinessHourInput {
  calendarId: Int!
  values: CreateCalendarBusinessHourCommandValuesInput!
}

input CreateCalendarCommandValuesInput {
  name: String!
  calendarType: String!
  timeZone: String
  customValues: MapOfObject
}

input CreateCalendarEventCommandValuesInput {
  summary: String!
  description: String
  location: String
  start: DateTime!
  end: DateTime!
  status: CalendarEventStatus!
  transparency: CalendarEventTransparency!
  customValues: MapOfObject
  recurrenceRule: CalendarRecurrenceRuleDtoInput
}

input CreateCalendarEventInput {
  calendarId: Int!
  values: CreateCalendarEventCommandValuesInput!
}

input CreateCalendarInput {
  organizationId: Int!
  values: CreateCalendarCommandValuesInput!
}

input CreateCarrierEquipmentCommandValuesInput {
  carrierId: Int!
  equipmentTypeId: Int!
  quantity: Int!
}

input CreateCarrierEquipmentInput {
  values: CreateCarrierEquipmentCommandValuesInput!
}

input CreateChargeCommandInput {
  dryRun: Boolean!
  organizationId: Int!
  values: CreateChargeCommandValuesInput!
}

input CreateChargeCommandValuesInput {
  accountingItemId: Int!
  orderId: Int
  accountingTransactionId: Int
  currencyId: Int!
  amount: Decimal!
  applyBy: ApplyBy!
  applyToContactId: Int!
  chargeType: ChargeType!
  chargeStatus: ChargeStatus
  description: String
  isConsolidated: Boolean!
  paidAs: PaidAs!
  price: Decimal!
  quantity: Decimal!
  showInDocuments: Boolean!
  unit: String
  salesTaxId: Int
  salesTaxRate: Decimal!
  salesTaxAmount: Decimal!
  totalAmount: Decimal!
  note: String
  rateId: Int
  allowAutomaticUpdate: Boolean!
  calculatedOf: CalculatedOfTypes
  customValues: MapOfObject
}

input CreateChargeInput {
  organizationId: Int!
  values: CreateChargeCommandValuesInput!
}

input CreateCityCommandValuesInput {
  cityName: String!
  stateCode: String!
  countryCode: String!
  longitude: Float
  latitude: Float
  customValues: MapOfObject
}

input CreateCityInput {
  organizationId: Int!
  values: CreateCityCommandValuesInput!
}

input CreateCommodityCommandValuesInput {
  commodityId: Int
  description: String!
  dimensionsUnit: DimensionsUnit!
  height: Decimal
  length: Decimal
  packageTypeId: Int
  pieces: Int!
  volumeUnit: VolumeUnit!
  weight: Decimal
  weightByTotal: Boolean!
  weightUnit: WeightUnit!
  width: Decimal
  quantity: Int
  unit: String
  unitaryValue: Decimal
  note: String
  commodityTypeId: Int
  commodityTypeCode: String
  customValues: MapOfObject
  containerCommodityId: Int
  warehouseLocationId: Int
  containerCommodities: [CreateCommodityCommandValuesInput!]
  trackingNumbers: [CreateCommodityTrackingNumberCommandValuesInput!]
  commodityStatusId: Int
  commodityStatusName: String
  volumePiece: Decimal
  valueByTotal: Boolean!
  jobId: UUID
  orderId: Int
  warehouseLocationCode: String
  inventoryItemId: Int
  isDeleted: Boolean
}

input CreateCommodityInput {
  organizationId: Int!
  values: CreateCommodityCommandValuesInput!
  dryRun: Boolean! = false
}

input CreateCommodityStatusCommandValuesInput {
  description: String
  priority: Int!
  statusName: String!
  statusStage: CommodityStatusStage!
}

input CreateCommodityStatusInput {
  organizationId: Int!
  values: CreateCommodityStatusCommandValuesInput!
}

input CreateCommodityTrackingNumberCommandValuesInput {
  commodityId: Int
  syncOrderId: Int
  trackingNumber: String!
  isPrimary: Boolean!
  trackingNumberType: String
  orderId: Int
}

input CreateCommodityTrackingNumberInput {
  organizationId: Int!
  values: CreateCommodityTrackingNumberCommandValuesInput!
}

input CreateCommodityTypeCommandValuesInput {
  code: String!
  description: String
  isActive: Boolean
  customValues: [MapOfObject!]
}

input CreateCommodityTypeInput {
  organizationId: Int!
  values: CreateCommodityTypeCommandValuesInput!
}

input CreateContactAddressCommandValuesInput {
  addressLine: String!
  addressLine2: String
  addressType: AddressType!
  cityName: String
  contactId: Int!
  countryCode: String
  postalCode: String
  stateCode: String
  longitude: Float
  latitude: Float
  isInactive: Boolean
  customValues: MapOfObject
}

input CreateContactAddressInput {
  organizationId: Int!
  values: CreateContactAddressCommandValuesInput!
}

input CreateContactCommandValuesInput {
  accountNumber: String
  contactFirstName: String
  contactLastName: String
  contactType: ContactType!
  divisionId: Int!
  emailAddress: String
  faxNumber: String
  idNumber: String
  idNumberType: IDNumberType
  mobilePhoneNumber: String
  name: String!
  linkToContactId: Int
  linkToContactAddressId: Int
  contactLinkType: ContactLinkType
  phoneNumber: String
  website: String
  paymentTermId: Int
  userEmployee: UserEmployeeDtoInput
  creditLimit: Decimal
  paidAs: PaidAs
  isACorporation: Boolean
  carrierEquipments: [CarrierEquipmentDtoInput!]!
  customValues: MapOfObject
  contactStatusId: Int
  tags: [String!]
  discounts: [DiscountDtoInput!]
  parentContactId: Int
}

input CreateContactInput {
  organizationId: Int!
  values: CreateContactCommandValuesInput!
}

input CreateContactStatusCommandValuesInput {
  contactType: ContactType!
  priority: Int!
  statusDescription: String
  statusName: String!
  statusStage: ContactStatusStage!
}

input CreateContactStatusInput {
  organizationId: Int!
  values: CreateContactStatusCommandValuesInput!
}

input CreateContainerDescriptionCommandValuesInput {
  containerDescriptionCode: String!
  description: String!
}

input CreateContainerDescriptionInput {
  organizationId: Int!
  values: CreateContainerDescriptionCommandValuesInput!
}

input CreateContainerTypeCommandValuesInput {
  containerTypeCode: String!
  description: String!
}

input CreateContainerTypeInput {
  organizationId: Int!
  values: CreateContainerTypeCommandValuesInput!
}

input CreateCountryCommandValuesInput {
  countryCode: String!
  name: String!
  customValues: MapOfObject
}

input CreateCountryInput {
  organizationId: Int!
  values: CreateCountryCommandValuesInput!
}

input CreateCurrencyCommandValuesInput {
  currencyCode: String!
  currencyName: String
  decimalPlaces: Int
  exchangeRateLastUpdate: DateTime
  exchangeRateToPrimary: Decimal
  gainLossAccountId: Int
  isInactive: Boolean!
  symbol: String
}

input CreateCurrencyInput {
  organizationId: Int!
  values: CreateCurrencyCommandValuesInput!
}

input CreateCustomCodeCommandValuesInput {
  code: String!
  description: String!
  isCommonlyUsed: Boolean!
  codeType: CustomCodeTypes!
}

input CreateCustomCodeInput {
  organizationId: Int!
  values: CreateCustomCodeCommandValuesInput!
}

input CreateDiscountCommandValuesInput {
  activationCount: Int!
  activationLimit: Int
  customValues: [MapOfObject!]
  description: String
  endDate: DateTime!
  isActive: Boolean!
  minimumChargeAmount: Decimal
  name: String
  promoCode: String
  startDate: DateTime!
  targetContactTags: [String!]!
  type: DiscountType!
  usageLimit: Int
  usedCount: Int!
  value: Decimal!
  carriers: [ContactDtoInput!]!
  transportationModes: [ModeOfTransportationDtoInput!]!
  minimumWeight: Decimal
  minimumWeightUnit: WeightUnit
  destinationCountriesCodes: [String!]
  validationWorkflowsIds: [UUID!]
}

input CreateDiscountInput {
  organizationId: Int!
  values: CreateDiscountCommandValuesInput!
}

input CreateDivisionCommandValuesInput {
  assignDivisionToEntities: Boolean!
  comments: String
  divisionName: String!
  email: String
  faxNumber: String
  phoneNumber: String
  useDivisionInDocumentHeaders: Boolean!
  streetAndNumber: String
  city: String
  countryCode: String
  stateCode: String
  zipCode: String
  portId: String
  airAmsOriginatorCode: String
}

input CreateDivisionInput {
  organizationId: Int!
  values: CreateDivisionCommandValuesInput!
}

input CreateEquipmentTypeCommandValuesInput {
  name: String!
}

input CreateEquipmentTypeInput {
  organizationId: Int!
  values: CreateEquipmentTypeCommandValuesInput!
}

input CreateEventDefinitionCommandValuesInput {
  automaticCreate: AutomaticCreate
  description: String
  eventName: String!
  includeInTracking: Boolean!
  isInactive: Boolean!
  location: String
  sendEmail: Boolean!
  trigger: EventTriggerDtoInput
  isAutomaticCreate: Boolean!
  sendEmailDocumentId: Int
  customValues: MapOfObject
}

input CreateEventDefinitionInput {
  organizationId: Int!
  values: CreateEventDefinitionCommandValuesInput!
}

input CreateInventoryItemCommandValuesInput {
  availableQuantity: Int!
  backOrderQuantity: Int!
  customValues: MapOfObject
  customerContactId: Int
  description: String
  productName: String
  dimensionsUnit: DimensionsUnit!
  height: Decimal
  isInactive: Boolean!
  length: Decimal
  manufacturerContactId: Int
  modelNumber: String
  packageTypeId: Int
  sku: String!
  useSerialNumbers: Boolean!
  volumePiece: Decimal
  volumeUnit: VolumeUnit!
  weight: Decimal
  weightUnit: WeightUnit!
  width: Decimal
}

input CreateInventoryItemInput {
  organizationId: Int!
  values: CreateInventoryItemCommandValuesInput!
}

input CreateJobCommandValuesInput {
  customValues: MapOfObject
  customerId: Int
  description: String
  divisionId: Int
  employeeId: Int
  jobStatusId: Int
  isDraft: Boolean
}

input CreateJobInput {
  organizationId: Int!
  values: CreateJobCommandValuesInput!
}

input CreateJobStatusCommandValuesInput {
  customValues: MapOfObject
  jobStatusName: String!
  priority: Int!
  statusStage: StatusStage!
}

input CreateJobStatusInput {
  organizationId: Int!
  values: CreateJobStatusCommandValuesInput!
}

input CreateKnowledgeAssetCommandValuesInput {
  allowIndexing: Boolean!
  contentType: String!
  customValues: MapOfObject
  errorMessage: String
  indexedAt: DateTime
  plainText: String
  plainTextAttachmentId: Int
  processedAt: DateTime
  sourceAttachmentId: Int
  sourceUrl: String
  status: KnowledgeAssetStatus!
  tags: [String!]!
  title: String!
}

input CreateKnowledgeAssetInput {
  organizationId: Int!
  values: CreateKnowledgeAssetCommandValuesInput!
}

input CreateLaneCommandValuesInput {
  contactId: Int!
  customValues: MapOfObject
  description: String
  destinationPortId: String
  originPortId: String
  destinationCityId: Int
  originCityId: Int
}

input CreateLaneInput {
  organizationId: Int!
  values: CreateLaneCommandValuesInput!
}

input CreateModeOfTransportationCommandValuesInput {
  description: String!
  transportationMethod: CreateTransportationMethodInput!
  usCustomsCode: String!
  customValues: MapOfObject
}

input CreateModeOfTransportationInput {
  organizationId: Int!
  values: CreateModeOfTransportationCommandValuesInput!
}

input CreateOrderCommandValuesInput {
  billToContactId: Int
  divisionId: Int
  employeeContactId: Int
  orderNumber: String!
  orderStatusId: Int
  orderType: OrderTypes!
  salespersonContactId: Int
  equipmentTypeId: Int
  trackingNumber: String
  orderEntities: [CreateOrderEntityCommandValuesInput!]!
  commodities: [CreateCommodityCommandValuesInput!]!
  charges: [CreateChargeCommandInput!]!
  trackingEvents: [CreateTrackingEventCommandInput!]!
  orderDocuments: [CreateOrderDocumentCommandValuesInput!]!
  carriersId: [Int!]!
  customValues: MapOfObject
  jobIds: [UUID!]
  isDraft: Boolean
}

input CreateOrderCommodityCommandValuesInput {
  commodityId: Int
  customValues: [MapOfObject!]
  commodity: CreateCommodityCommandValuesInput
}

input CreateOrderCommodityInput {
  organizationId: Int!
  orderId: Int!
  values: CreateOrderCommodityCommandValuesInput!
}

input CreateOrderDocumentCommandValuesInput {
  documentTemplateId: Int
  workflowId: UUID
  documentTemplateName: String
  regenerateOnOrderChange: Boolean!
  updateIfAlreadyExists: Boolean!
  metadata: MapOfObject
}

input CreateOrderDocumentInput {
  organizationId: Int!
  orderId: Int!
  values: CreateOrderDocumentCommandValuesInput!
}

input CreateOrderEntityCommandValuesInput {
  contactAddressId: Int
  contactId: Int
  nonContactName: String
  orderEntitySequence: Int!
  entityType: EntityTypes
  customValues: MapOfObject
}

input CreateOrderEntityInput {
  organizationId: Int!
  orderId: Int!
  values: CreateOrderEntityCommandValuesInput!
}

input CreateOrderInput {
  organizationId: Int!
  values: CreateOrderCommandValuesInput!
}

input CreateOrderStatusCommandValuesInput {
  orderStatusDescription: String
  orderStatusName: String!
  orderType: OrderTypes!
  priority: Int!
  statusStage: StatusStage!
  requireConfirmation: Boolean!
  customValues: MapOfObject
}

input CreateOrderStatusInput {
  organizationId: Int!
  values: CreateOrderStatusCommandValuesInput!
}

input CreateOrganizationConfigCommandValuesInput {
  configName: String!
  customValues: MapOfObject
}

input CreateOrganizationConfigInput {
  organizationId: Int!
  values: CreateOrganizationConfigCommandValuesInput!
}

input CreatePackageCategoryCommandValuesInput {
  packageCategoryCode: String!
  isContainer: Boolean!
  name: String!
}

input CreatePackageCategoryInput {
  organizationId: Int!
  values: CreatePackageCategoryCommandValuesInput!
}

input CreatePackageTypeCommandValuesInput {
  air: Boolean!
  containerDescriptionCode: String
  containerTypeCode: String
  ground: Boolean!
  height: Decimal!
  length: Decimal!
  maximumWeight: Decimal!
  name: String!
  ocean: Boolean!
  packageCategoryCode: String!
  volume: Decimal!
  weight: Decimal!
  width: Decimal!
}

input CreatePackageTypeInput {
  organizationId: Int!
  values: CreatePackageTypeCommandValuesInput!
}

input CreatePaymentCommandValuesInput {
  accountingAccountId: Int!
  amountReceived: Decimal!
  applyToContactId: Int!
  checkNumber: String!
  currencyId: Int!
  divisionId: Int!
  memo: String!
  paymentDate: DateTime!
  accountingTransactionPayments: [AccountingTransactionPaymentDtoInput!]!
  customValues: MapOfObject
}

input CreatePaymentInput {
  organizationId: Int!
  values: CreatePaymentCommandValuesInput!
}

input CreatePaymentTermCommandValuesInput {
  description: String!
  discountPaidWithinDays: Int
  discountPercentage: Int
  isInactive: Boolean!
  netDueDays: Int!
}

input CreatePaymentTermInput {
  organizationId: Int!
  values: CreatePaymentTermCommandValuesInput!
}

input CreatePortCommandValuesInput {
  portId: String!
  isAir: Boolean!
  isBorderCrossingPoint: Boolean!
  countryCode: String!
  isMyCompany: Boolean!
  isMail: Boolean!
  isMariTime: Boolean!
  name: String!
  portRemarks: String!
  isRail: Boolean!
  isRoad: Boolean!
  stateCode: String!
}

input CreatePortInput {
  organizationId: Int!
  values: CreatePortCommandValuesInput!
}

input CreatePostalCodeCommandValuesInput {
  accuracy: AccuracyTypes
  code: String!
  countryCode: String!
  customValues: MapOfObject
  longitude: Float
  latitude: Float
  placeName: String!
  stateCode: String
}

input CreatePostalCodeInput {
  organizationId: Int!
  values: CreatePostalCodeCommandValuesInput!
}

input CreateRateCommandValuesInput {
  rateNumber: String
  accountingItemId: Int!
  amendmentNumber: String
  applyToDestinationCountry: Boolean!
  applyToOriginCountry: Boolean!
  automaticallyCreateCharge: Boolean!
  carrierId: Int
  finalMileCarrierId: Int
  clientId: Int
  commodityTypeId: Int
  contractNumber: String
  countryOfDestinationCode: String
  countryOfOriginCode: String
  currencyId: Int
  effectiveDate: DateTime
  expirationDate: DateTime
  frequency: Frequency
  isHazardous: Boolean
  modeOfTransportationId: Int
  notes: String
  portOfDeliveryId: String
  portOfLoadingId: String
  portOfReceiptId: String
  portOfUnloadingId: String
  rateType: RateType!
  serviceType: ServiceType
  tariff: TariffOptionsInput
  transitDaysMin: Int
  transitDaysMax: Int
  routeId: Int
  routeLegId: Int
  customValues: MapOfString
}

input CreateRateInput {
  organizationId: Int!
  values: CreateRateCommandValuesInput!
}

input CreateRouteCommandValuesInput {
  customValues: MapOfObject
  divisionId: Int
  enabled: Boolean!
  mainCarrierId: Int
  name: String
  portOfLoadingId: String
  portOfUnloadingId: String
  transitTimeDays: TimeSpanScalar
  transitTimeOverride: Boolean!
  transportationMethod: TransportationMethod!
  isDraft: Boolean!
}

input CreateRouteInput {
  organizationId: Int!
  values: CreateRouteCommandValuesInput!
}

input CreateRouteLegCommandValuesInput {
  carrierId: Int
  customValues: MapOfObject
  enabled: Boolean!
  name: String
  pointOfDestinationId: String
  pointOfOriginId: String
  routeId: Int
  transitTimeDays: TimeSpanScalar
  transportationMethod: TransportationMethod!
  volumeWeightFactor: Decimal
  isDraft: Boolean!
}

input CreateRouteLegInput {
  organizationId: Int!
  values: CreateRouteLegCommandValuesInput!
}

input CreateRouteRouteLegCommandValuesInput {
  routeLegId: Int!
  sequenceNumber: Int!
}

input CreateRouteRouteLegInput {
  organizationId: Int!
  routeId: Int!
  values: CreateRouteRouteLegCommandValuesInput!
}

input CreateSalesTaxCommandValuesInput {
  authorityContactId: Int
  description: String!
  isGroupTax: Boolean!
  isInactive: Boolean!
  parentSalesTaxId: Int
  rate: Decimal!
  taxCode: String!
}

input CreateSalesTaxInput {
  organizationId: Int!
  values: CreateSalesTaxCommandValuesInput!
}

input CreateStateCommandValuesInput {
  countryCode: String!
  stateCode: String!
  name: String!
  customValues: MapOfObject
}

input CreateStateInput {
  organizationId: Int!
  values: CreateStateCommandValuesInput!
}

input CreateTrackingEventCommandInput {
  organizationId: Int!
  values: CreateTrackingEventCommandValuesInput!
}

input CreateTrackingEventCommandValuesInput {
  description: String
  eventDate: DateTime
  eventDefinitionId: Int!
  includeInTracking: Boolean!
  isInactive: Boolean!
  location: String
  sendEmail: Boolean!
  orderId: Int
  customValues: MapOfObject
}

input CreateTrackingEventInput {
  organizationId: Int!
  values: CreateTrackingEventCommandValuesInput!
}

input CreateTransportationMethodInput {
  transportationMethod: TransportationMethod!
  transportationMethodDescription: TransportationMethodDescription!
}

input CreateUserCommandInput {
  email: String!
  firstName: String!
  lastName: String!
  userName: String!
  password: String!
  promoCode: String!
  source: String!
  preferredLanguage: String
}

input CreateUserEmployeeCommandValuesInput {
  employeeContactId: Int!
  organizationId: Int!
  userId: String!
  visibleTransactions: VisibleTransactions!
  userGroups: [UserGroupDtoFixedInput!]!
}

input CreateUserEmployeeInput {
  values: CreateUserEmployeeCommandValuesInput!
}

input CreateUserGroupCommandValuesInput {
  description: String!
  name: String!
  userRoles: [ApplicationUserRoleDtoInput!]
}

input CreateUserGroupInput {
  organizationId: Int!
  values: CreateUserGroupCommandValuesInput!
}

input CreateUserGroupRoleCommandValuesInput {
  roleId: String!
  userGroupId: Int!
}

input CreateUserGroupRoleInput {
  values: CreateUserGroupRoleCommandValuesInput!
}

input CreateUserInput {
  values: CreateUserCommandInput!
}

input CreateUserSettingCommandValuesInput {
  name: String!
  settings: MapOfObject
  userId: String
}

input CreateUserSettingInput {
  organizationId: Int!
  values: CreateUserSettingCommandValuesInput!
}

input CreateVesselCommandValuesInput {
  carrierId: Int
  countryCode: String
  name: String!
  vesselCode: String
}

input CreateVesselInput {
  organizationId: Int!
  values: CreateVesselCommandValuesInput!
}

input CreateWarehouseLocationCommandValuesInput {
  code: String!
  customerId: Int
  description: String
  height: Decimal
  isInactive: Boolean!
  length: Decimal
  locationType: LocationType!
  maximumWeight: Decimal
  width: Decimal
  parentZoneId: Int
}

input CreateWarehouseLocationInput {
  organizationId: Int!
  values: CreateWarehouseLocationCommandValuesInput!
}

input CreateWarehouseZoneCommandValuesInput {
  customerId: Int
  description: String
  divisionId: Int
  name: String!
  parentZoneId: Int
}

input CreateWarehouseZoneInput {
  organizationId: Int!
  values: CreateWarehouseZoneCommandValuesInput!
}

input CreateWorkflowInput {
  organizationId: Int!
  workflowYamlDocument: String!
  appManifestId: UUID
}

input DateTimeOperationFilterInput {
  eq: DateTime @cost(weight: "10")
  neq: DateTime @cost(weight: "10")
  in: [DateTime] @cost(weight: "10")
  nin: [DateTime] @cost(weight: "10")
  gt: DateTime @cost(weight: "10")
  ngt: DateTime @cost(weight: "10")
  gte: DateTime @cost(weight: "10")
  ngte: DateTime @cost(weight: "10")
  lt: DateTime @cost(weight: "10")
  nlt: DateTime @cost(weight: "10")
  lte: DateTime @cost(weight: "10")
  nlte: DateTime @cost(weight: "10")
}

input DecimalOperationFilterInput {
  eq: Decimal @cost(weight: "10")
  neq: Decimal @cost(weight: "10")
  in: [Decimal] @cost(weight: "10")
  nin: [Decimal] @cost(weight: "10")
  gt: Decimal @cost(weight: "10")
  ngt: Decimal @cost(weight: "10")
  gte: Decimal @cost(weight: "10")
  ngte: Decimal @cost(weight: "10")
  lt: Decimal @cost(weight: "10")
  nlt: Decimal @cost(weight: "10")
  lte: Decimal @cost(weight: "10")
  nlte: Decimal @cost(weight: "10")
}

input DeleteAccountingAccountInput {
  organizationId: Int!
  accountId: Int!
}

input DeleteAccountingItemInput {
  organizationId: Int!
  accountingItemId: Int!
}

input DeleteAccountingTransactionInput {
  organizationId: Int!
  accountingTransactionId: Int!
}

input DeleteActionEventInput {
  organizationId: Int!
  eventId: UUID!
}

input DeleteAppManifestInput {
  organizationId: Int!
  appManifestId: UUID!
}

input DeleteAppModuleInput {
  organizationId: Int!
  appModuleId: UUID!
}

input DeleteAttachmentInput {
  organizationId: Int!
  attachmentId: Int!
}

input DeleteCalendarAvailabilityBlockInput {
  calendarAvailabilityBlockId: Int!
}

input DeleteCalendarBusinessHourInput {
  calendarBusinessHourId: Int!
}

input DeleteCalendarEventInput {
  calendarEventId: Int!
}

input DeleteCalendarInput {
  organizationId: Int!
  calendarId: Int!
}

input DeleteCarrierEquipmentInput {
  carrierId: Int!
  equipmentTypeId: Int!
}

input DeleteChargeInput {
  organizationId: Int!
  chargeId: Int!
}

input DeleteCityInput {
  organizationId: Int!
  cityId: Int!
}

input DeleteCommodityInput {
  organizationId: Int!
  commodityId: Int!
  orderId: Int
}

input DeleteCommodityStatusInput {
  organizationId: Int!
  statusId: Int!
}

input DeleteCommodityTrackingNumberInput {
  organizationId: Int!
  commodityTrackingNumberId: Int!
}

input DeleteCommodityTypeInput {
  organizationId: Int!
  commodityTypeId: Int!
}

input DeleteContactAddressInput {
  organizationId: Int!
  contactAddressId: Int!
}

input DeleteContactInput {
  organizationId: Int!
  contactId: Int!
}

input DeleteContactStatusInput {
  organizationId: Int!
  statusId: Int!
}

input DeleteContainerDescriptionInput {
  organizationId: Int!
  containerDescriptionCode: String!
}

input DeleteContainerTypeInput {
  organizationId: Int!
  containerTypeCode: String!
}

input DeleteCountryInput {
  organizationId: Int!
  countryCode: String!
}

input DeleteCurrencyInput {
  organizationId: Int!
  currencyId: Int!
}

input DeleteCustomCodeInput {
  organizationId: Int!
  code: String!
}

input DeleteDiscountInput {
  organizationId: Int!
  discountId: Int!
}

input DeleteDivisionInput {
  organizationId: Int!
  divisionId: Int!
}

input DeleteEquipmentTypeInput {
  organizationId: Int!
  equipmentTypeId: Int!
}

input DeleteEventDefinitionInput {
  organizationId: Int!
  eventDefinitionId: Int!
}

input DeleteInventoryItemInput {
  organizationId: Int!
  inventoryItemId: Int!
  force: Boolean! = false
}

input DeleteJobInput {
  organizationId: Int!
  jobId: UUID!
}

input DeleteJobStatusInput {
  organizationId: Int!
  jobStatusId: Int!
}

input DeleteKnowledgeAssetInput {
  organizationId: Int!
  knowledgeAssetId: UUID!
}

input DeleteLaneInput {
  organizationId: Int!
  id: Int!
}

input DeleteModeOfTransportationInput {
  organizationId: Int!
  modeOfTransportationId: Int!
}

input DeleteOrderCommodityInput {
  organizationId: Int!
  orderId: Int!
  commodityId: Int!
}

input DeleteOrderDocumentInput {
  orderId: Int!
  orderDocumentId: Int!
}

input DeleteOrderInput {
  organizationId: Int!
  orderId: Int!
}

input DeleteOrderStatusInput {
  organizationId: Int!
  orderStatusId: Int!
}

input DeleteOrganizationConfigInput {
  organizationId: Int!
  organizationConfigId: Int!
}

input DeletePackageCategoryInput {
  organizationId: Int!
  packageCategoryCode: String!
}

input DeletePackageTypeInput {
  organizationId: Int!
  packageTypeId: Int!
}

input DeletePaymentInput {
  organizationId: Int!
  paymentId: Int!
}

input DeletePaymentTermInput {
  organizationId: Int!
  paymentTermId: Int!
}

input DeletePortInput {
  organizationId: Int!
  portId: String!
  countryCode: String!
}

input DeletePostalCodeInput {
  organizationId: Int!
  id: Int!
}

input DeleteRateInput {
  organizationId: Int!
  rateId: Int!
}

input DeleteRouteInput {
  organizationId: Int!
  routeId: Int!
}

input DeleteRouteLegInput {
  organizationId: Int!
  routeLegId: Int!
}

input DeleteRouteRouteLegInput {
  organizationId: Int!
  routeId: Int!
  routeLegId: Int!
}

input DeleteSalesTaxInput {
  organizationId: Int!
  salesTaxId: Int!
}

input DeleteStateInput {
  organizationId: Int!
  countryCode: String!
  stateCode: String!
}

input DeleteTrackingEventInput {
  organizationId: Int!
  trackingEventId: Int!
}

input DeleteUserEmployeeInput {
  userEmployeeId: Int!
}

input DeleteUserFromUserGroupInput {
  organizationId: Int!
  userGroupId: Int!
  contactId: Int!
}

input DeleteUserGroupInput {
  organizationId: Int!
  userGroupId: Int!
}

input DeleteUserGroupRoleInput {
  organizationId: Int!
  roleId: String!
  userGroupId: Int!
}

input DeleteUserInput {
  id: String!
}

input DeleteUserSettingInput {
  organizationId: Int!
  userSettingId: Int!
}

input DeleteVesselInput {
  organizationId: Int!
  vesselId: Int!
}

input DeleteWarehouseLocationInput {
  organizationId: Int!
  warehouseLocationId: Int!
}

input DeleteWarehouseZoneInput {
  organizationId: Int!
  warehouseZoneId: Int!
}

input DeleteWorkflowInput {
  organizationId: Int!
  workflowId: UUID!
}

input DimensionsUnitOperationFilterInput {
  eq: DimensionsUnit @cost(weight: "10")
  neq: DimensionsUnit @cost(weight: "10")
  in: [DimensionsUnit!] @cost(weight: "10")
  nin: [DimensionsUnit!] @cost(weight: "10")
}

input DiscountDtoInput {
  discountId: Int!
  activationCount: Int!
  activationLimit: Int
  created: DateTime!
  createdBy: String!
  customValues: [MapOfObject!]
  description: String
  endDate: DateTime!
  isActive: Boolean!
  lastModified: DateTime!
  lastModifiedBy: String!
  minimumChargeAmount: Decimal
  name: String
  organizationId: Int!
  promoCode: String
  startDate: DateTime!
  targetContactTags: [String!]
  type: DiscountType!
  usageLimit: Int
  usedCount: Int!
  value: Decimal!
  carriers: [ContactDtoInput!]
  transportationModes: [ModeOfTransportationDtoInput!]
  links: [LinkDtoInput!]!
}

input DiscountTypeOperationFilterInput {
  eq: DiscountType @cost(weight: "10")
  neq: DiscountType @cost(weight: "10")
  in: [DiscountType!] @cost(weight: "10")
  nin: [DiscountType!] @cost(weight: "10")
}

input DocumentTemplateGqlDtoFilterInput {
  and: [DocumentTemplateGqlDtoFilterInput!]
  or: [DocumentTemplateGqlDtoFilterInput!]
  documentTemplateId: IntOperationFilterInput
  bodyHtmlTemplate: StringOperationFilterInput
  bodyTextTemplate: StringOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customPaperSize: StringOperationFilterInput
  description: StringOperationFilterInput
  documentTemplateType: DocumentTemplateTypeOperationFilterInput
  fileNameTemplate: StringOperationFilterInput
  fileType: FileTypeOperationFilterInput
  gqlQuery: StringOperationFilterInput
  gqlVariables: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  isDefault: BooleanOperationFilterInput
  isInactive: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  margins: StringOperationFilterInput
  name: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  paperSize: NullableOfPaperSizesOperationFilterInput
  subjectTemplate: StringOperationFilterInput
  templatingEngine: NullableOfTemplatingEnginesOperationFilterInput
}

input DocumentTemplateTypeOperationFilterInput {
  eq: DocumentTemplateType @cost(weight: "10")
  neq: DocumentTemplateType @cost(weight: "10")
  in: [DocumentTemplateType!] @cost(weight: "10")
  nin: [DocumentTemplateType!] @cost(weight: "10")
}

input EventTriggerDtoInput {
  entity: String!
  eventName: String!
  conditionFields: MapOfString
}

input ExecuteWorkflowInput {
  organizationId: Int
  organizationUniqueId: UUID
  workflowId: UUID!
  variables: MapOfObject
}

input FileTypeOperationFilterInput {
  eq: FileType @cost(weight: "10")
  neq: FileType @cost(weight: "10")
  in: [FileType!] @cost(weight: "10")
  nin: [FileType!] @cost(weight: "10")
}

input FloatOperationFilterInput {
  eq: Float @cost(weight: "10")
  neq: Float @cost(weight: "10")
  in: [Float] @cost(weight: "10")
  nin: [Float] @cost(weight: "10")
  gt: Float @cost(weight: "10")
  ngt: Float @cost(weight: "10")
  gte: Float @cost(weight: "10")
  ngte: Float @cost(weight: "10")
  lt: Float @cost(weight: "10")
  nlt: Float @cost(weight: "10")
  lte: Float @cost(weight: "10")
  nlte: Float @cost(weight: "10")
}

input FromConfigValueFilterInput {
  and: [FromConfigValueFilterInput!]
  or: [FromConfigValueFilterInput!]
  configName: StringOperationFilterInput
  key: StringOperationFilterInput
}

input ImportCommoditiesInput {
  organizationId: Int!
  fileUploadUrl: String!
  keys: [String!]
  updateIfExists: Boolean! = true
  matchByFilter: String
}

input ImportCommodityTypesInput {
  organizationId: Int!
  fileUploadUrl: String!
  keys: [String!]
}

input ImportContactsInput {
  organizationId: Int!
  fileUploadUrl: String!
}

input ImportCountriesInput {
  organizationId: Int!
  fileUploadUrl: String!
  keys: [String!]
}

input ImportEquipmentTypesInput {
  organizationId: Int!
  fileUploadUrl: String!
  keys: [String!]
}

input ImportPostalCodesInput {
  organizationId: Int!
  fileUploadUrl: String!
}

input ImportRatesInput {
  organizationId: Int!
  fileUploadUrl: String!
  rateType: RateType!
}

input ImportStatesInput {
  organizationId: Int!
  fileUploadUrl: String!
  keys: [String!]
}

input InstallAppManifestCommandValuesInput {
  repository: String!
  repositoryBranch: String!
  force: Boolean
  isAutoUpdateEnabled: Boolean
}

input InstallAppManifestInput {
  organizationId: Int!
  values: InstallAppManifestCommandValuesInput!
}

input IntOperationFilterInput {
  eq: Int @cost(weight: "10")
  neq: Int @cost(weight: "10")
  in: [Int] @cost(weight: "10")
  nin: [Int] @cost(weight: "10")
  gt: Int @cost(weight: "10")
  ngt: Int @cost(weight: "10")
  gte: Int @cost(weight: "10")
  ngte: Int @cost(weight: "10")
  lt: Int @cost(weight: "10")
  nlt: Int @cost(weight: "10")
  lte: Int @cost(weight: "10")
  nlte: Int @cost(weight: "10")
}

input ItemTypeOperationFilterInput {
  eq: ItemType @cost(weight: "10")
  neq: ItemType @cost(weight: "10")
  in: [ItemType!] @cost(weight: "10")
  nin: [ItemType!] @cost(weight: "10")
}

input JobFilterInput {
  and: [JobFilterInput!]
  or: [JobFilterInput!]
  jobId: UuidOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  customerId: IntOperationFilterInput
  description: StringOperationFilterInput
  divisionId: IntOperationFilterInput
  employeeId: IntOperationFilterInput
  jobNumber: StringOperationFilterInput
  jobStatusId: IntOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  isDraft: BooleanOperationFilterInput
  orders: ListFilterInputTypeOforderFilterInput
  accountingTransactions: ListFilterInputTypeOfaccountingTransactionFilterInput
  commodities: ListFilterInputTypeOfcommodityFilterInput
  customer: contactFilterInput
  employee: contactFilterInput
  jobStatus: jobStatusFilterInput
  division: divisionFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input JobOrderGqlDtoFilterInput {
  and: [JobOrderGqlDtoFilterInput!]
  or: [JobOrderGqlDtoFilterInput!]
  jobId: UuidOperationFilterInput
  orderId: IntOperationFilterInput
}

input KeyValuePairOfStringAndObjectFilterInput {
  and: [KeyValuePairOfStringAndObjectFilterInput!]
  or: [KeyValuePairOfStringAndObjectFilterInput!]
  key: StringOperationFilterInput
}

input LinkDtoFilterInput {
  and: [LinkDtoFilterInput!]
  or: [LinkDtoFilterInput!]
  href: StringOperationFilterInput
  rel: StringOperationFilterInput
  type: StringOperationFilterInput
  templated: BooleanOperationFilterInput
}

input LinkDtoInput {
  href: String!
  rel: String!
  type: String!
  templated: Boolean
}

input ListDecimalOperationFilterInput {
  all: DecimalOperationFilterInput @cost(weight: "10")
  none: DecimalOperationFilterInput @cost(weight: "10")
  some: DecimalOperationFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfAttachmentGqlDtoFilterInput {
  all: AttachmentGqlDtoFilterInput @cost(weight: "10")
  none: AttachmentGqlDtoFilterInput @cost(weight: "10")
  some: AttachmentGqlDtoFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfComponentInputFilterInput {
  all: ComponentInputFilterInput @cost(weight: "10")
  none: ComponentInputFilterInput @cost(weight: "10")
  some: ComponentInputFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfConditionFilterInput {
  all: ConditionFilterInput @cost(weight: "10")
  none: ConditionFilterInput @cost(weight: "10")
  some: ConditionFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfJobFilterInput {
  all: JobFilterInput @cost(weight: "10")
  none: JobFilterInput @cost(weight: "10")
  some: JobFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfJobOrderGqlDtoFilterInput {
  all: JobOrderGqlDtoFilterInput @cost(weight: "10")
  none: JobOrderGqlDtoFilterInput @cost(weight: "10")
  some: JobOrderGqlDtoFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput {
  all: KeyValuePairOfStringAndObjectFilterInput @cost(weight: "10")
  none: KeyValuePairOfStringAndObjectFilterInput @cost(weight: "10")
  some: KeyValuePairOfStringAndObjectFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfLinkDtoFilterInput {
  all: LinkDtoFilterInput @cost(weight: "10")
  none: LinkDtoFilterInput @cost(weight: "10")
  some: LinkDtoFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfOutputMapFilterInput {
  all: OutputMapFilterInput @cost(weight: "10")
  none: OutputMapFilterInput @cost(weight: "10")
  some: OutputMapFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfRateDataFilterInput {
  all: RateDataFilterInput @cost(weight: "10")
  none: RateDataFilterInput @cost(weight: "10")
  some: RateDataFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfScheduleFilterInput {
  all: ScheduleFilterInput @cost(weight: "10")
  none: ScheduleFilterInput @cost(weight: "10")
  some: ScheduleFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfSwitchCaseFilterInput {
  all: SwitchCaseFilterInput @cost(weight: "10")
  none: SwitchCaseFilterInput @cost(weight: "10")
  some: SwitchCaseFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfWorkflowActivityFilterInput {
  all: WorkflowActivityFilterInput @cost(weight: "10")
  none: WorkflowActivityFilterInput @cost(weight: "10")
  some: WorkflowActivityFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfWorkflowEventHandlerFilterInput {
  all: WorkflowEventHandlerFilterInput @cost(weight: "10")
  none: WorkflowEventHandlerFilterInput @cost(weight: "10")
  some: WorkflowEventHandlerFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfWorkflowTaskFilterInput {
  all: WorkflowTaskFilterInput @cost(weight: "10")
  none: WorkflowTaskFilterInput @cost(weight: "10")
  some: WorkflowTaskFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfWorkflowTriggerFilterInput {
  all: WorkflowTriggerFilterInput @cost(weight: "10")
  none: WorkflowTriggerFilterInput @cost(weight: "10")
  some: WorkflowTriggerFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfWorkflowVariableFilterInput {
  all: WorkflowVariableFilterInput @cost(weight: "10")
  none: WorkflowVariableFilterInput @cost(weight: "10")
  some: WorkflowVariableFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfaccountingTransactionFilterInput {
  all: accountingTransactionFilterInput @cost(weight: "10")
  none: accountingTransactionFilterInput @cost(weight: "10")
  some: accountingTransactionFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfaccountingTransactionPaymentFilterInput {
  all: accountingTransactionPaymentFilterInput @cost(weight: "10")
  none: accountingTransactionPaymentFilterInput @cost(weight: "10")
  some: accountingTransactionPaymentFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfchargeFilterInput {
  all: chargeFilterInput @cost(weight: "10")
  none: chargeFilterInput @cost(weight: "10")
  some: chargeFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfcommodityFilterInput {
  all: commodityFilterInput @cost(weight: "10")
  none: commodityFilterInput @cost(weight: "10")
  some: commodityFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfcommodityTrackingNumberFilterInput {
  all: commodityTrackingNumberFilterInput @cost(weight: "10")
  none: commodityTrackingNumberFilterInput @cost(weight: "10")
  some: commodityTrackingNumberFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfcontactAddressFilterInput {
  all: contactAddressFilterInput @cost(weight: "10")
  none: contactAddressFilterInput @cost(weight: "10")
  some: contactAddressFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfcontactFilterInput {
  all: contactFilterInput @cost(weight: "10")
  none: contactFilterInput @cost(weight: "10")
  some: contactFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfcontactLinkFilterInput {
  all: contactLinkFilterInput @cost(weight: "10")
  none: contactLinkFilterInput @cost(weight: "10")
  some: contactLinkFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfcountryFilterInput {
  all: countryFilterInput @cost(weight: "10")
  none: countryFilterInput @cost(weight: "10")
  some: countryFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfdiscountFilterInput {
  all: discountFilterInput @cost(weight: "10")
  none: discountFilterInput @cost(weight: "10")
  some: discountFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfmodeOfTransportationFilterInput {
  all: modeOfTransportationFilterInput @cost(weight: "10")
  none: modeOfTransportationFilterInput @cost(weight: "10")
  some: modeOfTransportationFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOforderCarrierFilterInput {
  all: orderCarrierFilterInput @cost(weight: "10")
  none: orderCarrierFilterInput @cost(weight: "10")
  some: orderCarrierFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOforderCommodityFilterInput {
  all: orderCommodityFilterInput @cost(weight: "10")
  none: orderCommodityFilterInput @cost(weight: "10")
  some: orderCommodityFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOforderDocumentFilterInput {
  all: orderDocumentFilterInput @cost(weight: "10")
  none: orderDocumentFilterInput @cost(weight: "10")
  some: orderDocumentFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOforderEntityFilterInput {
  all: orderEntityFilterInput @cost(weight: "10")
  none: orderEntityFilterInput @cost(weight: "10")
  some: orderEntityFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOforderFilterInput {
  all: orderFilterInput @cost(weight: "10")
  none: orderFilterInput @cost(weight: "10")
  some: orderFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfpaymentFilterInput {
  all: paymentFilterInput @cost(weight: "10")
  none: paymentFilterInput @cost(weight: "10")
  some: paymentFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfrateFilterInput {
  all: rateFilterInput @cost(weight: "10")
  none: rateFilterInput @cost(weight: "10")
  some: rateFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfrouteFilterInput {
  all: routeFilterInput @cost(weight: "10")
  none: routeFilterInput @cost(weight: "10")
  some: routeFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfrouteLegFilterInput {
  all: routeLegFilterInput @cost(weight: "10")
  none: routeLegFilterInput @cost(weight: "10")
  some: routeLegFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfrouteRouteLegFilterInput {
  all: routeRouteLegFilterInput @cost(weight: "10")
  none: routeRouteLegFilterInput @cost(weight: "10")
  some: routeRouteLegFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfstateFilterInput {
  all: stateFilterInput @cost(weight: "10")
  none: stateFilterInput @cost(weight: "10")
  some: stateFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOftrackingEventFilterInput {
  all: trackingEventFilterInput @cost(weight: "10")
  none: trackingEventFilterInput @cost(weight: "10")
  some: trackingEventFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfuserEmployeeFilterInput {
  all: userEmployeeFilterInput @cost(weight: "10")
  none: userEmployeeFilterInput @cost(weight: "10")
  some: userEmployeeFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfuserGroupFilterInput {
  all: userGroupFilterInput @cost(weight: "10")
  none: userGroupFilterInput @cost(weight: "10")
  some: userGroupFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfworkflowFilterInput {
  all: workflowFilterInput @cost(weight: "10")
  none: workflowFilterInput @cost(weight: "10")
  some: workflowFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFloatOperationFilterInput {
  all: FloatOperationFilterInput @cost(weight: "10")
  none: FloatOperationFilterInput @cost(weight: "10")
  some: FloatOperationFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListListDecimalOperationFilterInput {
  all: ListDecimalOperationFilterInput @cost(weight: "10")
  none: ListDecimalOperationFilterInput @cost(weight: "10")
  some: ListDecimalOperationFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput @cost(weight: "10")
  none: StringOperationFilterInput @cost(weight: "10")
  some: StringOperationFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input LocationTypeOperationFilterInput {
  eq: LocationType @cost(weight: "10")
  neq: LocationType @cost(weight: "10")
  in: [LocationType!] @cost(weight: "10")
  nin: [LocationType!] @cost(weight: "10")
}

input LogLevelOperationFilterInput {
  eq: LogLevel @cost(weight: "10")
  neq: LogLevel @cost(weight: "10")
  in: [LogLevel!] @cost(weight: "10")
  nin: [LogLevel!] @cost(weight: "10")
}

input MergeAppManifestCommandValuesInput {
  sourceAppManifestId: UUID!
  targetAppManifestId: UUID!
  force: Boolean
}

input MergeAppManifestInput {
  organizationId: Int!
  values: MergeAppManifestCommandValuesInput!
}

input ModeOfTransportationDtoInput {
  modeOfTransportationId: Int!
  created: DateTime!
  createdBy: String!
  description: String!
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  transportationMethod: TransportationMethod!
  transportationMethodDescription: TransportationMethodDescription!
  usCustomsCode: String!
  createdByUserName: String!
  lastModifiedByUserName: String!
  customValues: [MapOfObject!]
  links: [LinkDtoInput!]!
}

input NullableOfApplyByOperationFilterInput {
  eq: ApplyBy @cost(weight: "10")
  neq: ApplyBy @cost(weight: "10")
  in: [ApplyBy] @cost(weight: "10")
  nin: [ApplyBy] @cost(weight: "10")
}

input NullableOfCalculatedOfTypesOperationFilterInput {
  eq: CalculatedOfTypes @cost(weight: "10")
  neq: CalculatedOfTypes @cost(weight: "10")
  in: [CalculatedOfTypes] @cost(weight: "10")
  nin: [CalculatedOfTypes] @cost(weight: "10")
}

input NullableOfEntityTypesOperationFilterInput {
  eq: EntityTypes @cost(weight: "10")
  neq: EntityTypes @cost(weight: "10")
  in: [EntityTypes] @cost(weight: "10")
  nin: [EntityTypes] @cost(weight: "10")
}

input NullableOfFrequencyOperationFilterInput {
  eq: Frequency @cost(weight: "10")
  neq: Frequency @cost(weight: "10")
  in: [Frequency] @cost(weight: "10")
  nin: [Frequency] @cost(weight: "10")
}

input NullableOfIDNumberTypeOperationFilterInput {
  eq: IDNumberType @cost(weight: "10")
  neq: IDNumberType @cost(weight: "10")
  in: [IDNumberType] @cost(weight: "10")
  nin: [IDNumberType] @cost(weight: "10")
}

input NullableOfPaidAsOperationFilterInput {
  eq: PaidAs @cost(weight: "10")
  neq: PaidAs @cost(weight: "10")
  in: [PaidAs] @cost(weight: "10")
  nin: [PaidAs] @cost(weight: "10")
}

input NullableOfPaperSizesOperationFilterInput {
  eq: PaperSizes @cost(weight: "10")
  neq: PaperSizes @cost(weight: "10")
  in: [PaperSizes] @cost(weight: "10")
  nin: [PaperSizes] @cost(weight: "10")
}

input NullableOfPercentageOfTypeOperationFilterInput {
  eq: PercentageOfType @cost(weight: "10")
  neq: PercentageOfType @cost(weight: "10")
  in: [PercentageOfType] @cost(weight: "10")
  nin: [PercentageOfType] @cost(weight: "10")
}

input NullableOfRatePerTypeOperationFilterInput {
  eq: RatePerType @cost(weight: "10")
  neq: RatePerType @cost(weight: "10")
  in: [RatePerType] @cost(weight: "10")
  nin: [RatePerType] @cost(weight: "10")
}

input NullableOfServiceTypeOperationFilterInput {
  eq: ServiceType @cost(weight: "10")
  neq: ServiceType @cost(weight: "10")
  in: [ServiceType] @cost(weight: "10")
  nin: [ServiceType] @cost(weight: "10")
}

input NullableOfTemplatingEnginesOperationFilterInput {
  eq: TemplatingEngines @cost(weight: "10")
  neq: TemplatingEngines @cost(weight: "10")
  in: [TemplatingEngines] @cost(weight: "10")
  nin: [TemplatingEngines] @cost(weight: "10")
}

input NullableOfUnitsOperationFilterInput {
  eq: Units @cost(weight: "10")
  neq: Units @cost(weight: "10")
  in: [Units] @cost(weight: "10")
  nin: [Units] @cost(weight: "10")
}

input NullableOfWorkflowRuntimeExecutionModeOperationFilterInput {
  eq: WorkflowRuntimeExecutionMode @cost(weight: "10")
  neq: WorkflowRuntimeExecutionMode @cost(weight: "10")
  in: [WorkflowRuntimeExecutionMode] @cost(weight: "10")
  nin: [WorkflowRuntimeExecutionMode] @cost(weight: "10")
}

input OrderTypesOperationFilterInput {
  eq: OrderTypes @cost(weight: "10")
  neq: OrderTypes @cost(weight: "10")
  in: [OrderTypes!] @cost(weight: "10")
  nin: [OrderTypes!] @cost(weight: "10")
}

input OutputMapFilterInput {
  and: [OutputMapFilterInput!]
  or: [OutputMapFilterInput!]
  name: StringOperationFilterInput
  mapping: StringOperationFilterInput
  additionalProperties: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
}

input PaidAsOperationFilterInput {
  eq: PaidAs @cost(weight: "10")
  neq: PaidAs @cost(weight: "10")
  in: [PaidAs!] @cost(weight: "10")
  nin: [PaidAs!] @cost(weight: "10")
}

input PaymentStatusOperationFilterInput {
  eq: PaymentStatus @cost(weight: "10")
  neq: PaymentStatus @cost(weight: "10")
  in: [PaymentStatus!] @cost(weight: "10")
  nin: [PaymentStatus!] @cost(weight: "10")
}

input PublishAppManifestCommandValuesInput {
  message: String
  repository: String
  branch: String
  sourceBranchOrCommit: String
  force: Boolean
  moduleIds: [UUID!]
  workflowIds: [UUID!]
  keepUnpublishedState: Boolean
  pullRequestTitle: String
  pullRequestBody: String
}

input PublishAppManifestInput {
  organizationId: Int!
  appManifestId: UUID!
  values: PublishAppManifestCommandValuesInput!
}

input RateDataFilterInput {
  and: [RateDataFilterInput!]
  or: [RateDataFilterInput!]
  rateIndex: IntOperationFilterInput
  rateValue: DecimalOperationFilterInput
}

input RateDataInput {
  rateIndex: Int
  rateValue: Decimal!
}

input RateTypeOperationFilterInput {
  eq: RateType @cost(weight: "10")
  neq: RateType @cost(weight: "10")
  in: [RateType!] @cost(weight: "10")
  nin: [RateType!] @cost(weight: "10")
}

input ScheduleFilterInput {
  and: [ScheduleFilterInput!]
  or: [ScheduleFilterInput!]
  cron: StringOperationFilterInput
  displayName: StringOperationFilterInput
}

input SetUserSettingInput {
  organizationId: Int!
  userId: String
  name: String!
  settings: MapOfObject
}

input StatusStageOperationFilterInput {
  eq: StatusStage @cost(weight: "10")
  neq: StatusStage @cost(weight: "10")
  in: [StatusStage!] @cost(weight: "10")
  nin: [StatusStage!] @cost(weight: "10")
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String @cost(weight: "10")
  neq: String @cost(weight: "10")
  contains: String @cost(weight: "20")
  ncontains: String @cost(weight: "20")
  in: [String] @cost(weight: "10")
  nin: [String] @cost(weight: "10")
  startsWith: String @cost(weight: "20")
  nstartsWith: String @cost(weight: "20")
  endsWith: String @cost(weight: "20")
  nendsWith: String @cost(weight: "20")
}

input SwitchCaseFilterInput {
  and: [SwitchCaseFilterInput!]
  or: [SwitchCaseFilterInput!]
  description: StringOperationFilterInput
  when: ListFilterInputTypeOfConditionFilterInput
  steps: ListFilterInputTypeOfWorkflowTaskFilterInput
}

input TariffOptionsFilterInput {
  and: [TariffOptionsFilterInput!]
  or: [TariffOptionsFilterInput!]
  baseCharge: DecimalOperationFilterInput
  maximum: DecimalOperationFilterInput
  minimum: DecimalOperationFilterInput
  rateMultiplier: DecimalOperationFilterInput
  applyBy: NullableOfApplyByOperationFilterInput
  unitType: NullableOfUnitsOperationFilterInput
  ratePerType: NullableOfRatePerTypeOperationFilterInput
  calculatedOf: NullableOfCalculatedOfTypesOperationFilterInput
  minimumChargeableWeight: DecimalOperationFilterInput
  minimumWeight: DecimalOperationFilterInput
  maximumWeight: DecimalOperationFilterInput
  ratePer: DecimalOperationFilterInput
  rates: ListListDecimalOperationFilterInput
  percentageOfType: NullableOfPercentageOfTypeOperationFilterInput
  rateData: ListFilterInputTypeOfRateDataFilterInput
}

input TariffOptionsInput {
  baseCharge: Decimal
  maximum: Decimal
  minimum: Decimal
  rateMultiplier: Decimal
  applyBy: ApplyBy
  unitType: Units
  ratePerType: RatePerType
  calculatedOf: CalculatedOfTypes
  minimumChargeableWeight: Decimal
  minimumWeight: Decimal
  maximumWeight: Decimal
  ratePer: Decimal
  rates: [[Decimal!]!] @deprecated
  percentageOfType: PercentageOfType
  rateData: [RateDataInput!]
}

input TimeSpanOperationFilterInput {
  eq: TimeSpan @cost(weight: "10")
  neq: TimeSpan @cost(weight: "10")
  in: [TimeSpan] @cost(weight: "10")
  nin: [TimeSpan] @cost(weight: "10")
  gt: TimeSpan @cost(weight: "10")
  ngt: TimeSpan @cost(weight: "10")
  gte: TimeSpan @cost(weight: "10")
  ngte: TimeSpan @cost(weight: "10")
  lt: TimeSpan @cost(weight: "10")
  nlt: TimeSpan @cost(weight: "10")
  lte: TimeSpan @cost(weight: "10")
  nlte: TimeSpan @cost(weight: "10")
}

input TransportationMethodDescriptionOperationFilterInput {
  eq: TransportationMethodDescription @cost(weight: "10")
  neq: TransportationMethodDescription @cost(weight: "10")
  in: [TransportationMethodDescription!] @cost(weight: "10")
  nin: [TransportationMethodDescription!] @cost(weight: "10")
}

input TransportationMethodOperationFilterInput {
  eq: TransportationMethod @cost(weight: "10")
  neq: TransportationMethod @cost(weight: "10")
  in: [TransportationMethod!] @cost(weight: "10")
  nin: [TransportationMethod!] @cost(weight: "10")
}

input UpdateAccountingAccountInput {
  organizationId: Int!
  accountId: Int!
  values: MapOfObject
}

input UpdateAccountingItemInput {
  organizationId: Int!
  accountingItemId: Int!
  values: MapOfObject
}

input UpdateAccountingTransactionInput {
  organizationId: Int!
  accountingTransactionId: Int!
  values: MapOfObject
}

input UpdateActionEventInput {
  organizationId: Int!
  eventId: UUID!
  values: MapOfObject
}

input UpdateAppManifestInput {
  organizationId: Int!
  appManifestId: UUID!
  values: MapOfObject
}

input UpdateAppModuleInput {
  organizationId: Int!
  appModuleId: UUID!
  values: MapOfObject
}

input UpdateAttachmentInput {
  organizationId: Int!
  attachmentId: Int!
  values: MapOfObject
}

input UpdateCalendarAvailabilityBlockInput {
  calendarAvailabilityBlockId: Int!
  values: MapOfObject
}

input UpdateCalendarBusinessHourInput {
  calendarBusinessHourId: Int!
  values: MapOfObject
}

input UpdateCalendarBusinessHoursInput {
  organizationId: Int!
  calendarId: Int!
  businessHours: [BusinessHourInput!]!
}

input UpdateCalendarEventInput {
  calendarEventId: Int!
  values: MapOfObject
}

input UpdateCalendarInput {
  organizationId: Int!
  calendarId: Int!
  values: MapOfObject
}

input UpdateCarrierEquipmentInput {
  carrierId: Int!
  equipmentTypeId: Int!
  values: MapOfObject
}

input UpdateChargeInput {
  organizationId: Int!
  chargeId: Int!
  values: MapOfObject
}

input UpdateCityInput {
  organizationId: Int!
  cityId: Int!
  values: MapOfObject
}

input UpdateCommodityInput {
  organizationId: Int!
  commodityId: Int!
  values: MapOfObject
}

input UpdateCommodityStatusInput {
  organizationId: Int!
  statusId: Int!
  values: MapOfObject
}

input UpdateCommodityTrackingNumberInput {
  organizationId: Int!
  commodityTrackingNumberId: Int!
  values: MapOfObject
}

input UpdateCommodityTypeInput {
  organizationId: Int!
  commodityTypeId: Int!
  values: MapOfObject
}

input UpdateCommodityV1Input {
  organizationId: Int!
  commodityId: Int!
  values: MapOfObject
}

input UpdateContactAddressInput {
  organizationId: Int!
  contactAddressId: Int!
  values: MapOfObject
}

input UpdateContactInput {
  organizationId: Int!
  contactId: Int!
  values: MapOfObject
}

input UpdateContactPaymentMethodInput {
  organizationId: Int!
  contactPaymentMethodId: String!
  values: MapOfObject
}

input UpdateContactStatusInput {
  organizationId: Int!
  statusId: Int!
  values: MapOfObject
}

input UpdateContainerDescriptionInput {
  organizationId: Int!
  containerDescriptionCode: String!
  values: MapOfObject
}

input UpdateContainerTypeInput {
  organizationId: Int!
  containerTypeCode: String!
  values: MapOfObject
}

input UpdateCountryInput {
  organizationId: Int!
  countryCode: String!
  values: MapOfObject
}

input UpdateCurrencyInput {
  organizationId: Int!
  currencyId: Int!
  values: MapOfObject
}

input UpdateCustomCodeInput {
  organizationId: Int!
  code: String!
  values: MapOfObject
}

input UpdateDiscountInput {
  organizationId: Int!
  discountId: Int!
  values: MapOfObject
}

input UpdateDivisionInput {
  organizationId: Int!
  divisionId: Int!
  values: MapOfObject
}

input UpdateEquipmentTypeInput {
  organizationId: Int!
  equipmentTypeId: Int!
  values: MapOfObject
}

input UpdateEventDefinitionInput {
  organizationId: Int!
  eventDefinitionId: Int!
  values: MapOfObject
}

input UpdateInventoryItemInput {
  organizationId: Int!
  inventoryItemId: Int!
  values: MapOfObject
}

input UpdateJobInput {
  organizationId: Int!
  jobId: UUID!
  values: MapOfObject
}

input UpdateJobStatusInput {
  organizationId: Int!
  jobStatusId: Int!
  values: MapOfObject
}

input UpdateKnowledgeAssetInput {
  organizationId: Int!
  knowledgeAssetId: UUID!
  values: MapOfObject
}

input UpdateLaneInput {
  organizationId: Int!
  id: Int!
  values: MapOfObject
}

input UpdateModeOfTransportationInput {
  organizationId: Int!
  modeOfTransportationId: Int!
  values: MapOfObject
}

input UpdateOrderCommodityInput {
  organizationId: Int!
  orderId: Int!
  commodityId: Int!
  values: MapOfObject
}

input UpdateOrderDocumentInput {
  organizationId: Int!
  orderDocumentId: Int!
  values: MapOfObject
}

input UpdateOrderEntityInput {
  organizationId: Int!
  orderEntityId: Int!
  values: MapOfObject
}

input UpdateOrderInput {
  organizationId: Int!
  orderId: Int!
  values: MapOfObject
  lastModified: DateTime
}

input UpdateOrderStatusInput {
  organizationId: Int!
  orderStatusId: Int!
  values: MapOfObject
}

input UpdateOrganizationConfigInput {
  organizationId: Int!
  organizationConfigId: Int!
  values: MapOfObject
}

input UpdateOrganizationInput {
  organizationId: Int!
  values: MapOfObject
}

input UpdatePackageCategoryInput {
  organizationId: Int!
  packageCategoryCode: String!
  values: MapOfObject
}

input UpdatePackageTypeInput {
  organizationId: Int!
  packageTypeId: Int!
  values: MapOfObject
}

input UpdatePaymentInput {
  organizationId: Int!
  paymentId: Int!
  values: MapOfObject
}

input UpdatePaymentTermInput {
  organizationId: Int!
  paymentTermId: Int!
  values: MapOfObject
}

input UpdatePortInput {
  organizationId: Int!
  portId: String!
  countryCode: String!
  values: MapOfObject
}

input UpdatePostalCodeInput {
  organizationId: Int!
  id: Int!
  values: MapOfObject
}

input UpdateRateInput {
  organizationId: Int!
  rateId: Int!
  values: MapOfObject
}

input UpdateRouteInput {
  organizationId: Int!
  routeId: Int!
  values: MapOfObject
}

input UpdateRouteLegInput {
  organizationId: Int!
  routeLegId: Int!
  values: MapOfObject
}

input UpdateRouteRouteLegInput {
  organizationId: Int!
  routeId: Int!
  routeLegId: Int!
  values: MapOfObject
}

input UpdateSalesTaxInput {
  organizationId: Int!
  salesTaxId: Int!
  values: MapOfObject
}

input UpdateStateInput {
  organizationId: Int!
  countryCode: String!
  stateCode: String!
  values: MapOfObject
}

input UpdateTrackingEventInput {
  organizationId: Int!
  trackingEventId: Int!
  values: MapOfObject
}

input UpdateUserEmployeeInput {
  userEmployeeId: Int!
  values: MapOfObject
}

input UpdateUserGroupInput {
  organizationId: Int!
  userGroupId: Int!
  values: MapOfObject
}

input UpdateUserInput {
  id: String!
  values: MapOfObject
}

input UpdateUserSettingInput {
  organizationId: Int!
  userSettingId: Int!
  values: MapOfObject
}

input UpdateVesselInput {
  organizationId: Int!
  vesselId: Int!
  values: MapOfObject
}

input UpdateWarehouseLocationInput {
  organizationId: Int!
  warehouseLocationId: Int!
  values: MapOfObject
}

input UpdateWarehouseZoneInput {
  organizationId: Int!
  warehouseZoneId: Int!
  values: MapOfObject
}

input UpdateWorkflowInput {
  organizationId: Int!
  workflowId: UUID!
  workflowYamlDocument: String!
  appManifestId: UUID
}

input UserEmployeeDtoInput {
  userEmployeeId: Int!
  created: DateTime!
  createdBy: String!
  employeeContactId: Int!
  lastModified: DateTime!
  lastModifiedBy: String!
  organizationId: Int!
  userId: String!
  visibleTransactions: VisibleTransactions!
  employeeContactFirstName: String
  employeeContactLastName: String
  employeeName: String
  userFirstName: String
  userLastName: String
  userNormalizedUserName: String
  userUserName: String
  employeeDivisionId: Int!
  userGroups: [UserGroupDtoInput!]!
  links: [LinkDtoInput!]!
}

input UserGroupDtoFixedInput {
  userGroupId: Int
  created: DateTime
  createdBy: String
  description: String
  lastModified: DateTime
  lastModifiedBy: String
  name: String
  organizationId: Int
  userRoles: [ApplicationUserRoleDtoInput!]
}

input UserGroupDtoInput {
  userGroupId: Int!
  created: DateTime!
  createdBy: String!
  description: String!
  lastModified: DateTime!
  lastModifiedBy: String!
  name: String!
  organizationId: Int!
  userRoles: [ApplicationUserRoleDtoInput!]!
  links: [LinkDtoInput!]!
}

input UuidOperationFilterInput {
  eq: UUID @cost(weight: "10")
  neq: UUID @cost(weight: "10")
  in: [UUID] @cost(weight: "10")
  nin: [UUID] @cost(weight: "10")
  gt: UUID @cost(weight: "10")
  ngt: UUID @cost(weight: "10")
  gte: UUID @cost(weight: "10")
  ngte: UUID @cost(weight: "10")
  lt: UUID @cost(weight: "10")
  nlt: UUID @cost(weight: "10")
  lte: UUID @cost(weight: "10")
  nlte: UUID @cost(weight: "10")
}

input VisibleTransactionsOperationFilterInput {
  eq: VisibleTransactions @cost(weight: "10")
  neq: VisibleTransactions @cost(weight: "10")
  in: [VisibleTransactions!] @cost(weight: "10")
  nin: [VisibleTransactions!] @cost(weight: "10")
}

input VolumeUnitOperationFilterInput {
  eq: VolumeUnit @cost(weight: "10")
  neq: VolumeUnit @cost(weight: "10")
  in: [VolumeUnit!] @cost(weight: "10")
  nin: [VolumeUnit!] @cost(weight: "10")
}

input WeightUnitOperationFilterInput {
  eq: WeightUnit @cost(weight: "10")
  neq: WeightUnit @cost(weight: "10")
  in: [WeightUnit!] @cost(weight: "10")
  nin: [WeightUnit!] @cost(weight: "10")
}

input WorkflowActivityFilterInput {
  and: [WorkflowActivityFilterInput!]
  or: [WorkflowActivityFilterInput!]
  name: StringOperationFilterInput
  displayName: StringOperationFilterInput
  description: StringOperationFilterInput
  steps: ListFilterInputTypeOfWorkflowTaskFilterInput
  conditions: ListFilterInputTypeOfConditionFilterInput
  events: ListFilterInputTypeOfWorkflowEventHandlerFilterInput
  variables: ListFilterInputTypeOfWorkflowVariableFilterInput
}

input WorkflowDocumentFilterInput {
  and: [WorkflowDocumentFilterInput!]
  or: [WorkflowDocumentFilterInput!]
  workflow: WorkflowRuntimeFilterInput
  triggers: ListFilterInputTypeOfWorkflowTriggerFilterInput
  activities: ListFilterInputTypeOfWorkflowActivityFilterInput
  variables: ListFilterInputTypeOfWorkflowVariableFilterInput
  schedules: ListFilterInputTypeOfScheduleFilterInput
  outputs: ListFilterInputTypeOfOutputMapFilterInput
  inputs: ListFilterInputTypeOfComponentInputFilterInput
  events: ListFilterInputTypeOfWorkflowEventHandlerFilterInput
}

input WorkflowEventHandlerFilterInput {
  and: [WorkflowEventHandlerFilterInput!]
  or: [WorkflowEventHandlerFilterInput!]
  type: StringOperationFilterInput
  steps: ListFilterInputTypeOfWorkflowTaskFilterInput
}

input WorkflowRuntimeFilterInput {
  and: [WorkflowRuntimeFilterInput!]
  or: [WorkflowRuntimeFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  version: StringOperationFilterInput
  executionMode: NullableOfWorkflowRuntimeExecutionModeOperationFilterInput
  logLevel: LogLevelOperationFilterInput
  enableActionEvents: BooleanOperationFilterInput
  additionalProperties: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  workflowId: UuidOperationFilterInput
  enableTransaction: BooleanOperationFilterInput
  workflowType: StringOperationFilterInput
  isActive: BooleanOperationFilterInput
  enableAudit: BooleanOperationFilterInput
  runAs: StringOperationFilterInput
  priority: IntOperationFilterInput
  tags: ListStringOperationFilterInput
  concurrency: ConcurrencyFilterInput
}

input WorkflowTaskFilterInput {
  and: [WorkflowTaskFilterInput!]
  or: [WorkflowTaskFilterInput!]
  task: StringOperationFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  displayName: StringOperationFilterInput
  inputs: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  conditions: ListFilterInputTypeOfConditionFilterInput
  continueOnError: BooleanOperationFilterInput
  outputs: ListFilterInputTypeOfOutputMapFilterInput
  collection: StringOperationFilterInput
  item: StringOperationFilterInput
  maxIterations: IntOperationFilterInput
  steps: ListFilterInputTypeOfWorkflowTaskFilterInput
  cases: ListFilterInputTypeOfSwitchCaseFilterInput
  default: ListFilterInputTypeOfWorkflowTaskFilterInput
  runAs: StringOperationFilterInput
}

input WorkflowTriggerFilterInput {
  and: [WorkflowTriggerFilterInput!]
  or: [WorkflowTriggerFilterInput!]
  name: StringOperationFilterInput
  displayName: StringOperationFilterInput
  type: StringOperationFilterInput
  entityName: StringOperationFilterInput
  eventType: StringOperationFilterInput
  position: StringOperationFilterInput
  conditions: ListFilterInputTypeOfConditionFilterInput
}

input WorkflowVariableFilterInput {
  and: [WorkflowVariableFilterInput!]
  or: [WorkflowVariableFilterInput!]
  name: StringOperationFilterInput
  fromConfig: FromConfigValueFilterInput
}

input accountingAccountFilterInput {
  and: [accountingAccountFilterInput!]
  or: [accountingAccountFilterInput!]
  accountId: IntOperationFilterInput
  accountName: StringOperationFilterInput
  accountNumber: StringOperationFilterInput
  accountType: AccountTypeOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  isInactive: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  parentAccountId: IntOperationFilterInput
  parentAccount: accountingAccountFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input accountingItemFilterInput {
  and: [accountingItemFilterInput!]
  or: [accountingItemFilterInput!]
  accountingItemId: IntOperationFilterInput
  accountId: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  description: StringOperationFilterInput
  isInactive: BooleanOperationFilterInput
  itemCode: StringOperationFilterInput
  itemType: ItemTypeOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  price: DecimalOperationFilterInput
  salesTaxId: IntOperationFilterInput
  salesTax: salesTaxFilterInput
  tariff: TariffOptionsFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
  account: accountingAccountFilterInput
}

input accountingSummaryFilterInput {
  and: [accountingSummaryFilterInput!]
  or: [accountingSummaryFilterInput!]
  totalIncome: DecimalOperationFilterInput
  totalExpense: DecimalOperationFilterInput
  profit: DecimalOperationFilterInput
}

input accountingTransactionFilterInput {
  and: [accountingTransactionFilterInput!]
  or: [accountingTransactionFilterInput!]
  accountingTransactionId: IntOperationFilterInput
  isDraft: BooleanOperationFilterInput
  accountId: IntOperationFilterInput
  accountingTransactionStatus: AccountingTransactionStatusOperationFilterInput
  accountingTransactionType: AccountingTransactionTypeOperationFilterInput
  amount: DecimalOperationFilterInput
  amountDue: DecimalOperationFilterInput
  amountPaid: DecimalOperationFilterInput
  applyToContactID: IntOperationFilterInput
  applyToContact: contactFilterInput
  billToContactAddressId: IntOperationFilterInput
  billToContactAddress: contactAddressFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  divisionId: IntOperationFilterInput
  division: divisionFilterInput
  dueDate: DateTimeOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  note: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  organization: organizationFilterInput
  paidAs: PaidAsOperationFilterInput
  paidDate: DateTimeOperationFilterInput
  paymentTermsId: IntOperationFilterInput
  paymentTerm: paymentTermFilterInput
  transactionDate: DateTimeOperationFilterInput
  transactionNumber: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
  account: accountingAccountFilterInput
  charges: ListFilterInputTypeOfchargeFilterInput
  payments: ListFilterInputTypeOfpaymentFilterInput
  jobs: ListFilterInputTypeOfJobFilterInput
}

input accountingTransactionPaymentFilterInput {
  and: [accountingTransactionPaymentFilterInput!]
  or: [accountingTransactionPaymentFilterInput!]
  accountingTransactionId: IntOperationFilterInput
  amountApplied: DecimalOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input appManifestFilterInput {
  and: [appManifestFilterInput!]
  or: [appManifestFilterInput!]
  appManifestId: UuidOperationFilterInput
  author: StringOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  currentVersion: StringOperationFilterInput
  description: StringOperationFilterInput
  icon: StringOperationFilterInput
  isEnabled: BooleanOperationFilterInput
  isUpdateAvailable: BooleanOperationFilterInput
  hasUnpublishedChanges: BooleanOperationFilterInput
  isAutoUpdateEnabled: BooleanOperationFilterInput
  gitSha: StringOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  lastUpdateCheck: DateTimeOperationFilterInput
  manifest: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  name: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  repository: StringOperationFilterInput
  repositoryBranch: StringOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input chargeFilterInput {
  and: [chargeFilterInput!]
  or: [chargeFilterInput!]
  chargeId: IntOperationFilterInput
  accountingItemId: IntOperationFilterInput
  accountingItem: accountingItemFilterInput
  allowAutomaticUpdate: BooleanOperationFilterInput
  amount: DecimalOperationFilterInput
  applyBy: ApplyByOperationFilterInput
  applyToContactId: IntOperationFilterInput
  applyToContact: contactFilterInput
  calculatedOf: NullableOfCalculatedOfTypesOperationFilterInput
  chargeStatus: ChargeStatusOperationFilterInput
  chargeType: ChargeTypeOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  currencyId: IntOperationFilterInput
  currency: currencyFilterInput
  description: StringOperationFilterInput
  isConsolidated: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  note: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  paidAs: PaidAsOperationFilterInput
  price: DecimalOperationFilterInput
  quantity: DecimalOperationFilterInput
  rateId: IntOperationFilterInput
  rate: rateFilterInput
  salesTaxAmount: DecimalOperationFilterInput
  salesTaxId: IntOperationFilterInput
  salesTaxRate: DecimalOperationFilterInput
  amountAndTaxAmount: DecimalOperationFilterInput
  showInDocuments: BooleanOperationFilterInput
  totalAmount: DecimalOperationFilterInput
  unit: StringOperationFilterInput
  accountingTransactions: ListFilterInputTypeOfaccountingTransactionFilterInput
  orders: ListFilterInputTypeOforderFilterInput
  salesTax: salesTaxFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
}

input cityFilterInput {
  and: [cityFilterInput!]
  or: [cityFilterInput!]
  organizationId: IntOperationFilterInput
  cityId: IntOperationFilterInput
  cityName: StringOperationFilterInput
  countryCode: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  longitude: FloatOperationFilterInput
  latitude: FloatOperationFilterInput
  stateCode: StringOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  state: stateFilterInput
  country: countryFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input commodityFilterInput {
  and: [commodityFilterInput!]
  or: [commodityFilterInput!]
  commodityId: IntOperationFilterInput
  commodityStatusId: IntOperationFilterInput
  commodityStatus: commodityStatusFilterInput
  commodityTypeId: IntOperationFilterInput
  commodityType: commodityTypeFilterInput
  containerCommodityId: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  description: StringOperationFilterInput
  dimensionsUnit: DimensionsUnitOperationFilterInput
  height: DecimalOperationFilterInput
  jobId: UuidOperationFilterInput
  job: JobFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  length: DecimalOperationFilterInput
  note: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  packageTypeId: IntOperationFilterInput
  packageType: packageTypeFilterInput
  inventoryItemId: IntOperationFilterInput
  inventoryItem: inventoryItemFilterInput
  pieces: IntOperationFilterInput
  quantity: IntOperationFilterInput
  unit: StringOperationFilterInput
  unitaryValue: DecimalOperationFilterInput
  unitaryValueTotal: DecimalOperationFilterInput
  volumePiece: DecimalOperationFilterInput
  volumeTotal: DecimalOperationFilterInput
  volumeUnit: VolumeUnitOperationFilterInput
  warehouseLocationId: IntOperationFilterInput
  warehouseLocation: warehouseLocationFilterInput
  weight: DecimalOperationFilterInput
  weightByTotal: BooleanOperationFilterInput
  weightTotal: DecimalOperationFilterInput
  weightUnit: WeightUnitOperationFilterInput
  width: DecimalOperationFilterInput
  trackingNumbers: ListFilterInputTypeOfcommodityTrackingNumberFilterInput
  orderCommodities: ListFilterInputTypeOforderCommodityFilterInput
  containerCommodity: commodityFilterInput
  containerCommodities: ListFilterInputTypeOfcommodityFilterInput
  shipments: ListFilterInputTypeOforderFilterInput
  totalAmount: DecimalOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
  valueByTotal: BooleanOperationFilterInput
  packageTypeName: StringOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  links: ListFilterInputTypeOfLinkDtoFilterInput
}

input commodityStatusFilterInput {
  and: [commodityStatusFilterInput!]
  or: [commodityStatusFilterInput!]
  statusId: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  description: StringOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  priority: IntOperationFilterInput
  statusName: StringOperationFilterInput
  statusStage: CommodityStatusStageOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input commoditySummaryFilterInput {
  and: [commoditySummaryFilterInput!]
  or: [commoditySummaryFilterInput!]
  totalWeight: DecimalOperationFilterInput
  totalPieces: DecimalOperationFilterInput
  totalQuantity: DecimalOperationFilterInput
  totalVolume: DecimalOperationFilterInput
}

input commodityTrackingNumberFilterInput {
  and: [commodityTrackingNumberFilterInput!]
  or: [commodityTrackingNumberFilterInput!]
  commodityTrackingNumberId: IntOperationFilterInput
  commodityId: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  isPrimary: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  syncOrderId: IntOperationFilterInput
  order: orderFilterInput
  trackingNumber: StringOperationFilterInput
  trackingNumberType: StringOperationFilterInput
}

input commodityTypeFilterInput {
  and: [commodityTypeFilterInput!]
  or: [commodityTypeFilterInput!]
  commodityTypeId: IntOperationFilterInput
  code: StringOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  description: StringOperationFilterInput
  isActive: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input contactAddressFilterInput {
  and: [contactAddressFilterInput!]
  or: [contactAddressFilterInput!]
  contactAddressId: IntOperationFilterInput
  isInactive: BooleanOperationFilterInput
  addressLine: StringOperationFilterInput
  addressLine2: StringOperationFilterInput
  addressType: AddressTypeOperationFilterInput
  cityName: StringOperationFilterInput
  contactId: IntOperationFilterInput
  countryCode: StringOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  location: ListFloatOperationFilterInput
  longitude: FloatOperationFilterInput
  latitude: FloatOperationFilterInput
  organizationId: IntOperationFilterInput
  postalCode: StringOperationFilterInput
  stateCode: StringOperationFilterInput
  city: cityFilterInput
  state: stateFilterInput
  country: countryFilterInput
  contact: contactFilterInput
}

input contactFilterInput {
  and: [contactFilterInput!]
  or: [contactFilterInput!]
  contactId: IntOperationFilterInput
  accountNumber: StringOperationFilterInput
  contactFirstName: StringOperationFilterInput
  contactLastName: StringOperationFilterInput
  contactStatusId: IntOperationFilterInput
  contactStatus: contactStatusFilterInput
  contactType: ContactTypeOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  creditLimit: DecimalOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  divisionId: IntOperationFilterInput
  division: divisionFilterInput
  emailAddress: StringOperationFilterInput
  entityTypeId: IntOperationFilterInput
  faxNumber: StringOperationFilterInput
  idNumber: StringOperationFilterInput
  idNumberType: NullableOfIDNumberTypeOperationFilterInput
  isACorporation: BooleanOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  mobilePhoneNumber: StringOperationFilterInput
  name: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  paidAs: NullableOfPaidAsOperationFilterInput
  paymentTermId: IntOperationFilterInput
  paymentTerm: paymentTermFilterInput
  parentContactId: IntOperationFilterInput
  parentContact: contactFilterInput
  phoneNumber: StringOperationFilterInput
  tags: ListStringOperationFilterInput
  website: StringOperationFilterInput
  userEmployee: userEmployeeFilterInput
  contactAddresses: ListFilterInputTypeOfcontactAddressFilterInput
  contacts: ListFilterInputTypeOfcontactFilterInput
  contactLinks: ListFilterInputTypeOfcontactLinkFilterInput
  linkToContactLinks: ListFilterInputTypeOfcontactLinkFilterInput
  discounts: ListFilterInputTypeOfdiscountFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input contactLinkFilterInput {
  and: [contactLinkFilterInput!]
  or: [contactLinkFilterInput!]
  contactId: IntOperationFilterInput
  linkToContactId: IntOperationFilterInput
  linkToContactAddressId: IntOperationFilterInput
  contact: contactFilterInput
  linkToContact: contactFilterInput
  linkToContactAddress: contactAddressFilterInput
  contactLinkType: ContactLinkTypeOperationFilterInput
}

input contactStatusFilterInput {
  and: [contactStatusFilterInput!]
  or: [contactStatusFilterInput!]
  statusId: IntOperationFilterInput
  contactType: ContactTypeOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  priority: IntOperationFilterInput
  statusDescription: StringOperationFilterInput
  statusName: StringOperationFilterInput
  statusStage: ContactStatusStageOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input containerDescriptionFilterInput {
  and: [containerDescriptionFilterInput!]
  or: [containerDescriptionFilterInput!]
  organizationId: IntOperationFilterInput
  containerDescriptionCode: StringOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  description: StringOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input containerTypeFilterInput {
  and: [containerTypeFilterInput!]
  or: [containerTypeFilterInput!]
  organizationId: IntOperationFilterInput
  containerTypeCode: StringOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  description: StringOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input countryFilterInput {
  and: [countryFilterInput!]
  or: [countryFilterInput!]
  organizationId: IntOperationFilterInput
  countryCode: StringOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  name: StringOperationFilterInput
  states: ListFilterInputTypeOfstateFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input currencyFilterInput {
  and: [currencyFilterInput!]
  or: [currencyFilterInput!]
  currencyId: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  currencyCode: StringOperationFilterInput
  currencyName: StringOperationFilterInput
  decimalPlaces: IntOperationFilterInput
  exchangeRateLastUpdate: DateTimeOperationFilterInput
  exchangeRateToPrimary: DecimalOperationFilterInput
  gainLossAccountId: IntOperationFilterInput
  gainLossAccount: accountingItemFilterInput
  isInactive: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  symbol: StringOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input discountFilterInput {
  and: [discountFilterInput!]
  or: [discountFilterInput!]
  discountId: IntOperationFilterInput
  accountingItemId: IntOperationFilterInput
  activationCount: IntOperationFilterInput
  activationLimit: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  description: StringOperationFilterInput
  endDate: DateTimeOperationFilterInput
  isActive: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  minimumChargeAmount: DecimalOperationFilterInput
  name: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  promoCode: StringOperationFilterInput
  startDate: DateTimeOperationFilterInput
  targetContactTags: ListStringOperationFilterInput
  type: DiscountTypeOperationFilterInput
  usageLimit: IntOperationFilterInput
  usedCount: IntOperationFilterInput
  value: DecimalOperationFilterInput
  minimumWeight: DecimalOperationFilterInput
  minimumWeightUnit: WeightUnitOperationFilterInput
  carriers: ListFilterInputTypeOfcontactFilterInput
  transportationModes: ListFilterInputTypeOfmodeOfTransportationFilterInput
  destinationCountries: ListFilterInputTypeOfcountryFilterInput
  validationWorkflows: ListFilterInputTypeOfworkflowFilterInput
}

input divisionFilterInput {
  and: [divisionFilterInput!]
  or: [divisionFilterInput!]
  divisionId: IntOperationFilterInput
  airAmsOriginatorCode: StringOperationFilterInput
  assignDivisionToEntities: BooleanOperationFilterInput
  city: StringOperationFilterInput
  comments: StringOperationFilterInput
  countryCode: StringOperationFilterInput
  country: countryFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  divisionName: StringOperationFilterInput
  email: StringOperationFilterInput
  faxNumber: StringOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  phoneNumber: StringOperationFilterInput
  portId: StringOperationFilterInput
  port: portFilterInput
  stateCode: StringOperationFilterInput
  state: stateFilterInput
  streetAndNumber: StringOperationFilterInput
  useDivisionInDocumentHeaders: BooleanOperationFilterInput
  zipCode: StringOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input equipmentTypeFilterInput {
  and: [equipmentTypeFilterInput!]
  or: [equipmentTypeFilterInput!]
  equipmentTypeId: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  name: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input eventDefinitionFilterInput {
  and: [eventDefinitionFilterInput!]
  or: [eventDefinitionFilterInput!]
  eventDefinitionId: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  description: StringOperationFilterInput
  eventName: StringOperationFilterInput
  includeInTracking: BooleanOperationFilterInput
  isAutomaticCreate: BooleanOperationFilterInput
  isInactive: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  location: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  sendEmail: BooleanOperationFilterInput
  sendEmailDocumentId: IntOperationFilterInput
  triggerConditionFields: StringOperationFilterInput
  triggerEntityName: StringOperationFilterInput
  triggerEventName: StringOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input inventoryItemFilterInput {
  and: [inventoryItemFilterInput!]
  or: [inventoryItemFilterInput!]
  inventoryItemId: IntOperationFilterInput
  availableQuantity: IntOperationFilterInput
  backOrderQuantity: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  customerContactId: IntOperationFilterInput
  customerContact: contactFilterInput
  description: StringOperationFilterInput
  productName: StringOperationFilterInput
  dimensionsUnit: DimensionsUnitOperationFilterInput
  height: DecimalOperationFilterInput
  isInactive: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  length: DecimalOperationFilterInput
  manufacturerContactId: IntOperationFilterInput
  manufacturerContact: contactFilterInput
  modelNumber: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  packageTypeId: IntOperationFilterInput
  packageType: packageTypeFilterInput
  sku: StringOperationFilterInput
  useSerialNumbers: BooleanOperationFilterInput
  volumePiece: DecimalOperationFilterInput
  volumeUnit: VolumeUnitOperationFilterInput
  weight: DecimalOperationFilterInput
  weightUnit: WeightUnitOperationFilterInput
  width: DecimalOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input jobStatusFilterInput {
  and: [jobStatusFilterInput!]
  or: [jobStatusFilterInput!]
  jobStatusId: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  jobStatusName: StringOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  priority: IntOperationFilterInput
  statusStage: StatusStageOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input modeOfTransportationFilterInput {
  and: [modeOfTransportationFilterInput!]
  or: [modeOfTransportationFilterInput!]
  modeOfTransportationId: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  description: StringOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  transportationMethod: TransportationMethodOperationFilterInput
  transportationMethodDescription: TransportationMethodDescriptionOperationFilterInput
  usCustomsCode: StringOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input orderCarrierFilterInput {
  and: [orderCarrierFilterInput!]
  or: [orderCarrierFilterInput!]
  orderCarrierId: IntOperationFilterInput
  orderId: IntOperationFilterInput
  carrierId: IntOperationFilterInput
  carrier: contactFilterInput
}

input orderCommodityFilterInput {
  and: [orderCommodityFilterInput!]
  or: [orderCommodityFilterInput!]
  commodityId: IntOperationFilterInput
  commodity: commodityFilterInput
  orderId: IntOperationFilterInput
  order: orderFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
}

input orderDocumentFilterInput {
  and: [orderDocumentFilterInput!]
  or: [orderDocumentFilterInput!]
  orderDocumentId: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  documentTemplateId: IntOperationFilterInput
  lastGeneratedFile: StringOperationFilterInput
  lastGeneratedTime: DateTimeOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  documentTemplate: DocumentTemplateGqlDtoFilterInput
  metadata: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  orderId: IntOperationFilterInput
  regenerateOnOrderChange: BooleanOperationFilterInput
  linkToDocument: StringOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input orderEntityFilterInput {
  and: [orderEntityFilterInput!]
  or: [orderEntityFilterInput!]
  orderEntityId: IntOperationFilterInput
  contactAddressId: IntOperationFilterInput
  contactAddress: contactAddressFilterInput
  contactId: IntOperationFilterInput
  contact: contactFilterInput
  contactName: StringOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  entityType: NullableOfEntityTypesOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  nonContactName: StringOperationFilterInput
  orderEntitySequence: IntOperationFilterInput
  orderId: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  attachments: ListFilterInputTypeOfAttachmentGqlDtoFilterInput
}

input orderFilterInput {
  and: [orderFilterInput!]
  or: [orderFilterInput!]
  orderId: IntOperationFilterInput
  isDraft: BooleanOperationFilterInput
  billToContactId: IntOperationFilterInput
  billToContact: contactFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  divisionId: IntOperationFilterInput
  division: divisionFilterInput
  employeeContactId: IntOperationFilterInput
  employeeContact: contactFilterInput
  entityTypeId: IntOperationFilterInput
  equipmentTypeId: IntOperationFilterInput
  equipmentType: equipmentTypeFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  lastOrderStatusModified: DateTimeOperationFilterInput
  orderNumber: StringOperationFilterInput
  orderStatusId: IntOperationFilterInput
  orderStatus: orderStatusFilterInput
  orderType: OrderTypesOperationFilterInput
  organizationId: IntOperationFilterInput
  organization: organizationFilterInput
  salespersonContactId: IntOperationFilterInput
  salespersonContact: contactFilterInput
  trackingNumber: StringOperationFilterInput
  orderDocuments: ListFilterInputTypeOforderDocumentFilterInput
  orderEntities: ListFilterInputTypeOforderEntityFilterInput
  orderCarriers: ListFilterInputTypeOforderCarrierFilterInput
  orderEntityCarriers: ListFilterInputTypeOforderEntityFilterInput
  orderEntityVendors: ListFilterInputTypeOforderEntityFilterInput
  orderEntityPickups: ListFilterInputTypeOforderEntityFilterInput
  orderEntityDeliveries: ListFilterInputTypeOforderEntityFilterInput
  orderEntityDeliveryCarriers: ListFilterInputTypeOforderEntityFilterInput
  orderEntityDeliverTo: ListFilterInputTypeOforderEntityFilterInput
  orderEntityDestinationAgent: ListFilterInputTypeOforderEntityFilterInput
  orderEntityReceivedBy: ListFilterInputTypeOforderEntityFilterInput
  orderEntityPickupFrom: ListFilterInputTypeOforderEntityFilterInput
  orderEntityForwardingAgent: ListFilterInputTypeOforderEntityFilterInput
  orderEntityIntermediate: ListFilterInputTypeOforderEntityFilterInput
  orderEntityNotifyParty: ListFilterInputTypeOforderEntityFilterInput
  orderEntityUltimateConsignee: ListFilterInputTypeOforderEntityFilterInput
  orderEntityUsppi: ListFilterInputTypeOforderEntityFilterInput
  charges: ListFilterInputTypeOfchargeFilterInput
  orderCommodities: ListFilterInputTypeOforderCommodityFilterInput
  trackingEvents: ListFilterInputTypeOftrackingEventFilterInput
  shipments: ListFilterInputTypeOforderFilterInput
  invoices: ListFilterInputTypeOfaccountingTransactionFilterInput
  jobs: ListFilterInputTypeOfJobFilterInput
  jobOrders: ListFilterInputTypeOfJobOrderGqlDtoFilterInput
  attachments: ListFilterInputTypeOfAttachmentGqlDtoFilterInput
  carriers: ListFilterInputTypeOfcontactFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
  commoditySummary: commoditySummaryFilterInput
  accountingSummary: accountingSummaryFilterInput
  links: ListFilterInputTypeOfLinkDtoFilterInput
}

input orderStatusFilterInput {
  and: [orderStatusFilterInput!]
  or: [orderStatusFilterInput!]
  orderStatusId: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  orderStatusDescription: StringOperationFilterInput
  orderStatusName: StringOperationFilterInput
  orderType: OrderTypesOperationFilterInput
  organizationId: IntOperationFilterInput
  priority: IntOperationFilterInput
  requireConfirmation: BooleanOperationFilterInput
  statusStage: StatusStageOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input organizationFilterInput {
  and: [organizationFilterInput!]
  or: [organizationFilterInput!]
  organizationId: IntOperationFilterInput
  addressLine: StringOperationFilterInput
  addressLine2: StringOperationFilterInput
  cityName: StringOperationFilterInput
  companyName: StringOperationFilterInput
  countryCode: StringOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  faxNumber: StringOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  phoneNumber: StringOperationFilterInput
  postalCode: StringOperationFilterInput
  stateCode: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  uniqueId: UuidOperationFilterInput
}

input packageCategoryFilterInput {
  and: [packageCategoryFilterInput!]
  or: [packageCategoryFilterInput!]
  organizationId: IntOperationFilterInput
  packageCategoryCode: StringOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  isContainer: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  name: StringOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input packageTypeFilterInput {
  and: [packageTypeFilterInput!]
  or: [packageTypeFilterInput!]
  packageTypeId: IntOperationFilterInput
  air: BooleanOperationFilterInput
  containerDescriptionCode: StringOperationFilterInput
  containerDescription: containerDescriptionFilterInput
  containerTypeCode: StringOperationFilterInput
  containerType: containerTypeFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  ground: BooleanOperationFilterInput
  height: DecimalOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  length: DecimalOperationFilterInput
  maximumWeight: DecimalOperationFilterInput
  name: StringOperationFilterInput
  ocean: BooleanOperationFilterInput
  organizationId: IntOperationFilterInput
  packageCategoryCode: StringOperationFilterInput
  packageCategory: packageCategoryFilterInput
  volume: DecimalOperationFilterInput
  weight: DecimalOperationFilterInput
  width: DecimalOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input paymentFilterInput {
  and: [paymentFilterInput!]
  or: [paymentFilterInput!]
  paymentId: IntOperationFilterInput
  accountingAccountId: IntOperationFilterInput
  accountingAccount: accountingAccountFilterInput
  amountReceived: DecimalOperationFilterInput
  applyToContactId: IntOperationFilterInput
  applyToContact: contactFilterInput
  checkNumber: StringOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  currencyId: IntOperationFilterInput
  currency: currencyFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  divisionId: IntOperationFilterInput
  division: divisionFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  memo: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  paymentDate: DateTimeOperationFilterInput
  paymentStatus: PaymentStatusOperationFilterInput
  accountingTransactions: ListFilterInputTypeOfaccountingTransactionFilterInput
  accountingTransactionPayments: ListFilterInputTypeOfaccountingTransactionPaymentFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input paymentTermFilterInput {
  and: [paymentTermFilterInput!]
  or: [paymentTermFilterInput!]
  paymentTermId: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  description: StringOperationFilterInput
  discountPaidWithinDays: IntOperationFilterInput
  discountPercentage: IntOperationFilterInput
  isInactive: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  netDueDays: IntOperationFilterInput
  organizationId: IntOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input portFilterInput {
  and: [portFilterInput!]
  or: [portFilterInput!]
  organizationId: IntOperationFilterInput
  portId: StringOperationFilterInput
  countryCode: StringOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  isAir: BooleanOperationFilterInput
  isBorderCrossingPoint: BooleanOperationFilterInput
  isMail: BooleanOperationFilterInput
  isMariTime: BooleanOperationFilterInput
  isMyCompany: BooleanOperationFilterInput
  isRail: BooleanOperationFilterInput
  isRoad: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  name: StringOperationFilterInput
  portRemarks: StringOperationFilterInput
  stateCode: StringOperationFilterInput
  country: countryFilterInput
  state: stateFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input rateFilterInput {
  and: [rateFilterInput!]
  or: [rateFilterInput!]
  rateId: IntOperationFilterInput
  rateNumber: StringOperationFilterInput
  accountingItemId: IntOperationFilterInput
  accountingItem: accountingItemFilterInput
  amendmentNumber: StringOperationFilterInput
  applyToDestinationCountry: BooleanOperationFilterInput
  applyToOriginCountry: BooleanOperationFilterInput
  automaticallyCreateCharge: BooleanOperationFilterInput
  carrierId: IntOperationFilterInput
  carrier: contactFilterInput
  clientId: IntOperationFilterInput
  client: contactFilterInput
  commodityTypeId: IntOperationFilterInput
  commodityType: commodityTypeFilterInput
  contractNumber: StringOperationFilterInput
  countryOfDestinationCode: StringOperationFilterInput
  countryOfDestination: countryFilterInput
  countryOfOriginCode: StringOperationFilterInput
  countryOfOrigin: countryFilterInput
  routeId: IntOperationFilterInput
  route: routeFilterInput
  routeLegId: IntOperationFilterInput
  routeLeg: routeLegFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  currencyId: IntOperationFilterInput
  currency: currencyFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  effectiveDate: DateTimeOperationFilterInput
  expirationDate: DateTimeOperationFilterInput
  finalMileCarrierId: IntOperationFilterInput
  finalMileCarrier: contactFilterInput
  frequency: NullableOfFrequencyOperationFilterInput
  isHazardous: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  modeOfTransportationId: IntOperationFilterInput
  modeOfTransportation: modeOfTransportationFilterInput
  notes: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  portOfDeliveryId: StringOperationFilterInput
  portOfDelivery: portFilterInput
  portOfLoadingId: StringOperationFilterInput
  portOfLoading: portFilterInput
  portOfReceiptId: StringOperationFilterInput
  portOfReceipt: portFilterInput
  portOfUnloadingId: StringOperationFilterInput
  portOfUnloading: portFilterInput
  rateType: RateTypeOperationFilterInput
  serviceType: NullableOfServiceTypeOperationFilterInput
  tariff: TariffOptionsFilterInput
  transitDaysMax: IntOperationFilterInput
  transitDaysMin: IntOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input routeFilterInput {
  and: [routeFilterInput!]
  or: [routeFilterInput!]
  routeId: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  divisionId: IntOperationFilterInput
  division: divisionFilterInput
  enabled: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  mainCarrierId: IntOperationFilterInput
  mainCarrier: contactFilterInput
  name: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  portOfLoadingId: StringOperationFilterInput
  portOfLoading: portFilterInput
  portOfUnloadingId: StringOperationFilterInput
  portOfUnloading: portFilterInput
  transitTimeDays: TimeSpanOperationFilterInput
  transitTimeDaysInt: IntOperationFilterInput
  transitTimeOverride: BooleanOperationFilterInput
  transportationMethod: TransportationMethodOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
  isDraft: BooleanOperationFilterInput
  rates: ListFilterInputTypeOfrateFilterInput
  routeLegs: ListFilterInputTypeOfrouteLegFilterInput
  routeRouteLegs: ListFilterInputTypeOfrouteRouteLegFilterInput
}

input routeLegFilterInput {
  and: [routeLegFilterInput!]
  or: [routeLegFilterInput!]
  routeLegId: IntOperationFilterInput
  carrierId: IntOperationFilterInput
  carrier: contactFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  enabled: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  name: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  pointOfDestinationId: StringOperationFilterInput
  pointOfDestination: portFilterInput
  pointOfOriginId: StringOperationFilterInput
  pointOfOrigin: portFilterInput
  transitTimeDays: TimeSpanOperationFilterInput
  transitTimeDaysInt: IntOperationFilterInput
  transportationMethod: TransportationMethodOperationFilterInput
  volumeWeightFactor: DecimalOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
  isDraft: BooleanOperationFilterInput
  rates: ListFilterInputTypeOfrateFilterInput
  routes: ListFilterInputTypeOfrouteFilterInput
  routeRouteLegs: ListFilterInputTypeOfrouteRouteLegFilterInput
}

input routeRouteLegFilterInput {
  and: [routeRouteLegFilterInput!]
  or: [routeRouteLegFilterInput!]
  routeId: IntOperationFilterInput
  route: routeFilterInput
  routeLegId: IntOperationFilterInput
  routeLeg: routeLegFilterInput
  routeRouteLegsSequence: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
}

input salesTaxFilterInput {
  and: [salesTaxFilterInput!]
  or: [salesTaxFilterInput!]
  salesTaxId: IntOperationFilterInput
  authorityContactId: IntOperationFilterInput
  authorityContact: contactFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  description: StringOperationFilterInput
  isGroupTax: BooleanOperationFilterInput
  isInactive: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  parentSalesTaxId: IntOperationFilterInput
  rate: DecimalOperationFilterInput
  taxCode: StringOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input stateFilterInput {
  and: [stateFilterInput!]
  or: [stateFilterInput!]
  organizationId: IntOperationFilterInput
  countryCode: StringOperationFilterInput
  stateCode: StringOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  name: StringOperationFilterInput
  country: countryFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input trackingEventFilterInput {
  and: [trackingEventFilterInput!]
  or: [trackingEventFilterInput!]
  trackingEventId: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customValues: ListFilterInputTypeOfKeyValuePairOfStringAndObjectFilterInput
  description: StringOperationFilterInput
  eventDate: DateTimeOperationFilterInput
  eventDefinitionId: IntOperationFilterInput
  eventDefinition: eventDefinitionFilterInput
  includeInTracking: BooleanOperationFilterInput
  isInactive: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  location: StringOperationFilterInput
  sendEmail: BooleanOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input userEmployeeFilterInput {
  and: [userEmployeeFilterInput!]
  or: [userEmployeeFilterInput!]
  userEmployeeId: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  employeeContactId: IntOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  userId: StringOperationFilterInput
  user: userFilterInput
  visibleTransactions: VisibleTransactionsOperationFilterInput
  userGroups: ListFilterInputTypeOfuserGroupFilterInput
  userContact: contactFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input userFilterInput {
  and: [userFilterInput!]
  or: [userFilterInput!]
  id: StringOperationFilterInput
  firstName: StringOperationFilterInput
  lastName: StringOperationFilterInput
  userName: StringOperationFilterInput
  email: StringOperationFilterInput
  emailConfirmed: BooleanOperationFilterInput
  paymentMethodConfirmed: BooleanOperationFilterInput
  acknowledgementConfirmed: BooleanOperationFilterInput
  phoneNumber: StringOperationFilterInput
  phoneNumberConfirmed: BooleanOperationFilterInput
  isInactive: BooleanOperationFilterInput
  created: DateTimeOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  userEmployees: ListFilterInputTypeOfuserEmployeeFilterInput
}

input userGroupFilterInput {
  and: [userGroupFilterInput!]
  or: [userGroupFilterInput!]
  userGroupId: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  description: StringOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  name: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input warehouseLocationFilterInput {
  and: [warehouseLocationFilterInput!]
  or: [warehouseLocationFilterInput!]
  warehouseLocationId: IntOperationFilterInput
  code: StringOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customerId: IntOperationFilterInput
  customer: contactFilterInput
  description: StringOperationFilterInput
  height: DecimalOperationFilterInput
  isInactive: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  length: DecimalOperationFilterInput
  locationType: LocationTypeOperationFilterInput
  maximumWeight: DecimalOperationFilterInput
  organizationId: IntOperationFilterInput
  parentZoneId: IntOperationFilterInput
  parentWarehouseZone: warehouseZoneFilterInput
  width: DecimalOperationFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input warehouseZoneFilterInput {
  and: [warehouseZoneFilterInput!]
  or: [warehouseZoneFilterInput!]
  warehouseZoneId: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  customerId: IntOperationFilterInput
  customer: contactFilterInput
  description: StringOperationFilterInput
  divisionId: IntOperationFilterInput
  division: divisionFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  name: StringOperationFilterInput
  organizationId: IntOperationFilterInput
  parentZoneId: IntOperationFilterInput
  parentWarehouseZone: warehouseZoneFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

input workflowFilterInput {
  and: [workflowFilterInput!]
  or: [workflowFilterInput!]
  workflowId: UuidOperationFilterInput
  organizationId: IntOperationFilterInput
  created: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  isActive: BooleanOperationFilterInput
  lastModified: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  workflowDocument: WorkflowDocumentFilterInput
  workflowYamlDocument: StringOperationFilterInput
  publishedWorkflowYamlDocument: StringOperationFilterInput
  hasUnpublishedChanges: BooleanOperationFilterInput
  gitSha: StringOperationFilterInput
  tags: ListStringOperationFilterInput
  appManifestId: UuidOperationFilterInput
  appManifest: appManifestFilterInput
  updatedUser: userFilterInput
  createdUser: userFilterInput
}

enum AccountType {
  AccountReceivable
  AccountPayable
}

enum AccountingTransactionStatus {
  Open
  Paid
  Void
}

enum AccountingTransactionType {
  Invoice
  Bill
  CreditMemo
}

enum AccuracyTypes {
  Region
  Municipality
  Neighborhood
  Place
  Street
  Centroid
}

enum AddressType {
  Billing
  Shipping
  Other
}

enum ApplyBy {
  Pieces
  Weight
  ChargeableWeight
  Volume
  Container
  Calculated
  FlatRate
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
  "Before the resolver was executed."
  BEFORE_RESOLVER
  "After the resolver was executed."
  AFTER_RESOLVER
  "The policy is applied in the validation step before the execution."
  VALIDATION
}

enum AttachmentParentType {
  None
  Order
  Contact
  AccountingTransaction
  EquipmentType
  Job
  Commodity
}

enum AttachmentType {
  Picture
  OtherDocument
  Avatar
  CustomerDocument
}

enum AutomaticCreate {
  Manual
  OrderHasBeenSetAsPending
  OrderHasBeenCreated
  OrderHasBeenSetAsOpen
  OrderHasBeenSetAsRefused
  OrderHasBeenSetAsCovered
  OrderHasBeenSetAsDispatched
  OrderHasBeenSetAsOnRoute
  OrderHasBeenSetAsLoading
  OrderHasBeenSetAsUnloading
  OrderHasBeenSetAsInYard
  OrderHasBeenSetAsInvoiced
  OrderHasBeenSetAsDelivered
  OrderHasBeenSetAsCompleted
  OrderHasBeenSetAsCancelled
  OrderHasBeenEmailed
}

enum CalculatedOfTypes {
  Income
  Expense
  Profit
  IncomeFreight
}

enum CalendarEventStatus {
  Confirmed
  Tentative
  Cancelled
}

enum CalendarEventTransparency {
  Opaque
  Transparent
}

enum CalendarRecurrenceFrequency {
  Daily
  Weekly
  Monthly
  Yearly
}

enum ChargeStatus {
  Pending
  Open
  Posted
  Paid
  Void
}

enum ChargeType {
  Income
  Expense
  Credit
}

enum CommodityStatusStage {
  Pending
  InProgress
  Completed
}

enum ContactLinkType {
  ParentContact
  FactoringCompany
  SalesPerson
  ContactAddressLink
}

enum ContactStatusStage {
  Active
  Inactive
}

enum ContactType {
  Customer
  Carrier
  Vendor
  Contact
  Driver
  Employee
  SalesPerson
  ForwardingAgent
  FactoringCompany
  Lead
  PoolPoint
  DistributionCenter
  Store
}

enum CustomCodeTypes {
  ScheduleD
  ScheduleK
}

enum DimensionsUnit {
  In
  Cm
  M
  Ft
}

enum DiscountType {
  Percentage
  FixedAmount
}

enum DocumentTemplateType {
  RateConfirmationDocument
  RateConfirmationEmail
  InvoiceDocument
  InvoiceEmail
  BillOfLadingDocument
  BillOfLadingEmail
  ExportBillOfLadingDocument
  EventEmail
  QuoteConfirmationDocument
  QuoteConfirmationEmail
  ResetPasswordEmail
  VerifyEmailAddressEmail
  CustomsDeclarationDocument
  ExportManifestDocument
  MasterBillOfLadingDocument
  DockReceiptDocument
  AirWaybillDocument
  ShippingLabelDocument
  ExportManifestExcelDocument
  EmailNotification
}

enum EntityTypes {
  Shipper
  Consignee
  Carrier
  Vendor
  UltimateConsignee
  NotifyParty
  Intermediate
  ForwardingAgent
  DestinationAgent
  PickupFrom
  DeliverTo
  DeliveryCarrier
  ReceivedBy
  USPPI
}

enum EventStatus {
  Pending
  Completed
  Failed
}

enum FileType {
  Default
  Pdf
  Xlsx
  Word
  Csv
  Html
  Json
  Xml
  Png
}

enum Frequency {
  Daily
  Weekly
  Biweekly
  Monthly
  Other
}

enum IDNumberType {
  EIN
  DUNS
  ForeignEntityId
  Other
}

enum ItemType {
  Other
  Freight
  Valuation
  Tax
  OtherFreight
  Inventory
}

enum KnowledgeAssetStatus {
  Queued
  ContentProcessing
  ContentProcessed
  Indexing
  Indexed
  Error
}

enum LocationType {
  Receiving
  Storage
  Replenishment
  Picking
  QualityControl
  Shipping
  Mobile
  Other
  Packing
  Service
  PutAway
}

enum LogLevel {
  Trace
  Debug
  Information
  Warning
  Error
  Critical
  None
}

enum OrderTypes {
  Order
  Quote
  WarehouseReceipt
  Purchase
  ParcelShipment
  AirShipmentOrder
  OceanShipmentOrder
  CargoMovement
  EntityType
  PickupOrder
  LoadOrder
  BookingOrder
  Freight
}

enum PaidAs {
  Prepaid
  Collect
}

enum PaperSizes {
  Letter
  Legal
  Ledger
  Tabloid
  JuniorLegal
  A0
  A1
  A2
  A3
  A4
  A5
  A6
  A7
  A8
  A9
  A10
  B0
  B1
  B2
  B3
  B4
  B5
  B6
  B7
  B8
  B9
  B10
  C0
  C1
  C2
  C3
  C4
  C5
  C6
  C7
  C8
  C9
  C10
  JIS_B0
  JIS_B1
  JIS_B2
  JIS_B3
  JIS_B4
  JIS_B5
  Custom
}

enum PaymentStatus {
  Posted
  Void
}

enum PaymentType {
  Card
  AccountCredit
  Cash
  Check
  BankTransfer
  Other
}

enum PercentageOfType {
  Cost
  Income
  Profit
}

enum RatePerType {
  Unit
  Range
}

enum RateType {
  StandardClientRate
  ClientRate
  CarrierRate
  CommissionRate
}

enum ServiceType {
  PortToDoor
  DoorToDoor
  DoorToPort
  PortToPort
}

enum StatusStage {
  Pending
  InProgress
  Completed
}

enum TemplatingEngines {
  Razor
  Handlebars
}

enum TransportationMethod {
  Ocean
  Rail
  Ground
  Air
  Mail
  Unknown
  Pipe
}

enum TransportationMethodDescription {
  Vessel
  VesselAndContainerized
  Barge
  Rail
  RailAndContainerized
  Truck
  TruckAndContainerized
  Auto
  Pedestrian
  RoadAndOther
  Air
  AirAndContainerized
  Mail
  PassengerAndHandCarried
  FixedTransport
}

enum Units {
  Ft
  Vlb
  Vkg
  M
  Lb
  Kg
}

enum VisibleTransactions {
  AllTransactions
  DivisionOnly
  DivisionAndDivisionless
  UserTransactions
}

enum VolumeUnit {
  Ft
  Vlb
  Vkg
  M
  In
  Cm
}

enum WeightUnit {
  Lb
  Kg
}

enum WorkflowRuntimeExecutionMode {
  Async
  Sync
}

directive @allowAnonymous repeatable on FIELD_DEFINITION

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost(
  "The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc."
  weight: String!
) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize(
  "The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field."
  assumedSize: Int
  "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments."
  slicingArguments: [String!]
  "The `slicingArgumentDefaultValue` argument can be used to define a default value for a slicing argument, which is used if the argument is not present in a query."
  slicingArgumentDefaultValue: Int
  "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields."
  sizedFields: [String!]
  "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error."
  requireOneSlicingArgument: Boolean! = true
) on FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy(
  "The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types."
  url: String!
) on SCALAR

scalar Any

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https://www.graphql-scalars.com/date-time")

"The `Decimal` scalar type represents a decimal floating-point number."
scalar Decimal

scalar MapOfObject

scalar MapOfPoint

scalar MapOfString

"The `TimeSpan` scalar represents an ISO-8601 compliant duration type."
scalar TimeSpan

scalar TimeSpanScalar

scalar UUID @specifiedBy(url: "https://tools.ietf.org/html/rfc4122")
